
getStartLab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005790  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08005960  08005960  00006960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a78  08005a78  00007088  2**0
                  CONTENTS
  4 .ARM          00000008  08005a78  08005a78  00006a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a80  08005a80  00007088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a80  08005a80  00006a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a84  08005a84  00006a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005a88  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004be8  20000088  08005b10  00007088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c70  08005b10  00007c70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a74  00000000  00000000  000070b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034cc  00000000  00000000  0001fb2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  00022ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ffb  00000000  00000000  00024480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000332c  00000000  00000000  0002547b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000176c1  00000000  00000000  000287a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dae56  00000000  00000000  0003fe68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011acbe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000596c  00000000  00000000  0011ad04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00120670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005948 	.word	0x08005948

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	08005948 	.word	0x08005948

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fb44 	bl	8000b90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f842 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f8dc 	bl	80006c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000510:	f000 f8b0 	bl	8000674 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000514:	f002 fb84 	bl	8002c20 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000518:	4a11      	ldr	r2, [pc, #68]	@ (8000560 <main+0x60>)
 800051a:	2100      	movs	r1, #0
 800051c:	4811      	ldr	r0, [pc, #68]	@ (8000564 <main+0x64>)
 800051e:	f002 fbc9 	bl	8002cb4 <osThreadNew>
 8000522:	4603      	mov	r3, r0
 8000524:	4a10      	ldr	r2, [pc, #64]	@ (8000568 <main+0x68>)
 8000526:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000528:	4a10      	ldr	r2, [pc, #64]	@ (800056c <main+0x6c>)
 800052a:	2100      	movs	r1, #0
 800052c:	4810      	ldr	r0, [pc, #64]	@ (8000570 <main+0x70>)
 800052e:	f002 fbc1 	bl	8002cb4 <osThreadNew>
 8000532:	4603      	mov	r3, r0
 8000534:	4a0f      	ldr	r2, [pc, #60]	@ (8000574 <main+0x74>)
 8000536:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(StartTask3, NULL, &Task3_attributes);
 8000538:	4a0f      	ldr	r2, [pc, #60]	@ (8000578 <main+0x78>)
 800053a:	2100      	movs	r1, #0
 800053c:	480f      	ldr	r0, [pc, #60]	@ (800057c <main+0x7c>)
 800053e:	f002 fbb9 	bl	8002cb4 <osThreadNew>
 8000542:	4603      	mov	r3, r0
 8000544:	4a0e      	ldr	r2, [pc, #56]	@ (8000580 <main+0x80>)
 8000546:	6013      	str	r3, [r2, #0]

  /* creation of Task4 */
  Task4Handle = osThreadNew(StartTask4, NULL, &Task4_attributes);
 8000548:	4a0e      	ldr	r2, [pc, #56]	@ (8000584 <main+0x84>)
 800054a:	2100      	movs	r1, #0
 800054c:	480e      	ldr	r0, [pc, #56]	@ (8000588 <main+0x88>)
 800054e:	f002 fbb1 	bl	8002cb4 <osThreadNew>
 8000552:	4603      	mov	r3, r0
 8000554:	4a0d      	ldr	r2, [pc, #52]	@ (800058c <main+0x8c>)
 8000556:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000558:	f002 fb86 	bl	8002c68 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800055c:	bf00      	nop
 800055e:	e7fd      	b.n	800055c <main+0x5c>
 8000560:	080059d0 	.word	0x080059d0
 8000564:	080007a9 	.word	0x080007a9
 8000568:	200000ec 	.word	0x200000ec
 800056c:	080059f4 	.word	0x080059f4
 8000570:	080007d9 	.word	0x080007d9
 8000574:	200000f0 	.word	0x200000f0
 8000578:	08005a18 	.word	0x08005a18
 800057c:	08000829 	.word	0x08000829
 8000580:	200000f4 	.word	0x200000f4
 8000584:	08005a3c 	.word	0x08005a3c
 8000588:	08000879 	.word	0x08000879
 800058c:	200000f8 	.word	0x200000f8

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	@ 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 031c 	add.w	r3, r7, #28
 800059a:	2234      	movs	r2, #52	@ 0x34
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f005 f8ea 	bl	8005778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 0308 	add.w	r3, r7, #8
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	4b2c      	ldr	r3, [pc, #176]	@ (800066c <SystemClock_Config+0xdc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005bc:	4a2b      	ldr	r2, [pc, #172]	@ (800066c <SystemClock_Config+0xdc>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c4:	4b29      	ldr	r3, [pc, #164]	@ (800066c <SystemClock_Config+0xdc>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
 80005d4:	4b26      	ldr	r3, [pc, #152]	@ (8000670 <SystemClock_Config+0xe0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a25      	ldr	r2, [pc, #148]	@ (8000670 <SystemClock_Config+0xe0>)
 80005da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b23      	ldr	r3, [pc, #140]	@ (8000670 <SystemClock_Config+0xe0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005e8:	603b      	str	r3, [r7, #0]
 80005ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ec:	2301      	movs	r3, #1
 80005ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000600:	2304      	movs	r3, #4
 8000602:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000604:	23b4      	movs	r3, #180	@ 0xb4
 8000606:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000608:	2302      	movs	r3, #2
 800060a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800060c:	2302      	movs	r3, #2
 800060e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000610:	2302      	movs	r3, #2
 8000612:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f107 031c 	add.w	r3, r7, #28
 8000618:	4618      	mov	r0, r3
 800061a:	f001 f971 	bl	8001900 <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000624:	f000 f95c 	bl	80008e0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000628:	f000 fd9e 	bl	8001168 <HAL_PWREx_EnableOverDrive>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000632:	f000 f955 	bl	80008e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000636:	230f      	movs	r3, #15
 8000638:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063a:	2302      	movs	r3, #2
 800063c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000642:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000648:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800064c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800064e:	f107 0308 	add.w	r3, r7, #8
 8000652:	2105      	movs	r1, #5
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fdd7 	bl	8001208 <HAL_RCC_ClockConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000660:	f000 f93e 	bl	80008e0 <Error_Handler>
  }
}
 8000664:	bf00      	nop
 8000666:	3750      	adds	r7, #80	@ 0x50
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000678:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <MX_USART2_UART_Init+0x4c>)
 800067a:	4a12      	ldr	r2, [pc, #72]	@ (80006c4 <MX_USART2_UART_Init+0x50>)
 800067c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800067e:	4b10      	ldr	r3, [pc, #64]	@ (80006c0 <MX_USART2_UART_Init+0x4c>)
 8000680:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000684:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000686:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <MX_USART2_UART_Init+0x4c>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800068c:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <MX_USART2_UART_Init+0x4c>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000692:	4b0b      	ldr	r3, [pc, #44]	@ (80006c0 <MX_USART2_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000698:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <MX_USART2_UART_Init+0x4c>)
 800069a:	220c      	movs	r2, #12
 800069c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069e:	4b08      	ldr	r3, [pc, #32]	@ (80006c0 <MX_USART2_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a4:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <MX_USART2_UART_Init+0x4c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006aa:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <MX_USART2_UART_Init+0x4c>)
 80006ac:	f001 fe68 	bl	8002380 <HAL_UART_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006b6:	f000 f913 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200000a4 	.word	0x200000a4
 80006c4:	40004400 	.word	0x40004400

080006c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	@ 0x28
 80006cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	4b2e      	ldr	r3, [pc, #184]	@ (800079c <MX_GPIO_Init+0xd4>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	4a2d      	ldr	r2, [pc, #180]	@ (800079c <MX_GPIO_Init+0xd4>)
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ee:	4b2b      	ldr	r3, [pc, #172]	@ (800079c <MX_GPIO_Init+0xd4>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	4b27      	ldr	r3, [pc, #156]	@ (800079c <MX_GPIO_Init+0xd4>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	4a26      	ldr	r2, [pc, #152]	@ (800079c <MX_GPIO_Init+0xd4>)
 8000704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000708:	6313      	str	r3, [r2, #48]	@ 0x30
 800070a:	4b24      	ldr	r3, [pc, #144]	@ (800079c <MX_GPIO_Init+0xd4>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	4b20      	ldr	r3, [pc, #128]	@ (800079c <MX_GPIO_Init+0xd4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a1f      	ldr	r2, [pc, #124]	@ (800079c <MX_GPIO_Init+0xd4>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b1d      	ldr	r3, [pc, #116]	@ (800079c <MX_GPIO_Init+0xd4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b19      	ldr	r3, [pc, #100]	@ (800079c <MX_GPIO_Init+0xd4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a18      	ldr	r2, [pc, #96]	@ (800079c <MX_GPIO_Init+0xd4>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b16      	ldr	r3, [pc, #88]	@ (800079c <MX_GPIO_Init+0xd4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 6187 	mov.w	r1, #1080	@ 0x438
 8000754:	4812      	ldr	r0, [pc, #72]	@ (80007a0 <MX_GPIO_Init+0xd8>)
 8000756:	f000 fcd3 	bl	8001100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800075a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800075e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000760:	2300      	movs	r3, #0
 8000762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	4619      	mov	r1, r3
 800076e:	480d      	ldr	r0, [pc, #52]	@ (80007a4 <MX_GPIO_Init+0xdc>)
 8000770:	f000 fb32 	bl	8000dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000774:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8000778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	2301      	movs	r3, #1
 800077c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2300      	movs	r3, #0
 8000784:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	4619      	mov	r1, r3
 800078c:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <MX_GPIO_Init+0xd8>)
 800078e:	f000 fb23 	bl	8000dd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000792:	bf00      	nop
 8000794:	3728      	adds	r7, #40	@ 0x28
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020400 	.word	0x40020400
 80007a4:	40020800 	.word	0x40020800

080007a8 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  for(;;)
  {

//	  HAL_UART_Transmit(&huart2, dataTask1, sizeof(dataTask1), 1000);
	 // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_4);//red LED
 80007b0:	2110      	movs	r1, #16
 80007b2:	4808      	ldr	r0, [pc, #32]	@ (80007d4 <StartTask1+0x2c>)
 80007b4:	f000 fcbd 	bl	8001132 <HAL_GPIO_TogglePin>
	  osDelay(12000); //phase 1
 80007b8:	f642 60e0 	movw	r0, #12000	@ 0x2ee0
 80007bc:	f002 fb0c 	bl	8002dd8 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_4);
 80007c0:	2110      	movs	r1, #16
 80007c2:	4804      	ldr	r0, [pc, #16]	@ (80007d4 <StartTask1+0x2c>)
 80007c4:	f000 fcb5 	bl	8001132 <HAL_GPIO_TogglePin>
	  osDelay(13000);//phase 2
 80007c8:	f243 20c8 	movw	r0, #13000	@ 0x32c8
 80007cc:	f002 fb04 	bl	8002dd8 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_4);//red LED
 80007d0:	bf00      	nop
 80007d2:	e7ed      	b.n	80007b0 <StartTask1+0x8>
 80007d4:	40020400 	.word	0x40020400

080007d8 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
//	  HAL_UART_Transmit(&huart2, dataTask2, sizeof(dataTask2), 1000);
	  osDelay(10000); //Phase 1
 80007e0:	f242 7010 	movw	r0, #10000	@ 0x2710
 80007e4:	f002 faf8 	bl	8002dd8 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_5);//Orange LED
 80007e8:	2120      	movs	r1, #32
 80007ea:	480e      	ldr	r0, [pc, #56]	@ (8000824 <StartTask2+0x4c>)
 80007ec:	f000 fca1 	bl	8001132 <HAL_GPIO_TogglePin>
	  osDelay(2000); //Phase 2
 80007f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007f4:	f002 faf0 	bl	8002dd8 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_5);
 80007f8:	2120      	movs	r1, #32
 80007fa:	480a      	ldr	r0, [pc, #40]	@ (8000824 <StartTask2+0x4c>)
 80007fc:	f000 fc99 	bl	8001132 <HAL_GPIO_TogglePin>
	  osDelay(10000); //Phase 3
 8000800:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000804:	f002 fae8 	bl	8002dd8 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_5);
 8000808:	2120      	movs	r1, #32
 800080a:	4806      	ldr	r0, [pc, #24]	@ (8000824 <StartTask2+0x4c>)
 800080c:	f000 fc91 	bl	8001132 <HAL_GPIO_TogglePin>
	  osDelay(3000); // Phase 4
 8000810:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000814:	f002 fae0 	bl	8002dd8 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_5);
 8000818:	2120      	movs	r1, #32
 800081a:	4802      	ldr	r0, [pc, #8]	@ (8000824 <StartTask2+0x4c>)
 800081c:	f000 fc89 	bl	8001132 <HAL_GPIO_TogglePin>
	  osDelay(10000); //Phase 1
 8000820:	bf00      	nop
 8000822:	e7dd      	b.n	80007e0 <StartTask2+0x8>
 8000824:	40020400 	.word	0x40020400

08000828 <StartTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask3 */
void StartTask3(void *argument)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask3 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart2, dataTask3, sizeof(dataTask3), 1000);
 8000830:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000834:	2228      	movs	r2, #40	@ 0x28
 8000836:	490d      	ldr	r1, [pc, #52]	@ (800086c <StartTask3+0x44>)
 8000838:	480d      	ldr	r0, [pc, #52]	@ (8000870 <StartTask3+0x48>)
 800083a:	f001 fdf1 	bl	8002420 <HAL_UART_Transmit>
	  osDelay(12000);//phase 1,2
 800083e:	f642 60e0 	movw	r0, #12000	@ 0x2ee0
 8000842:	f002 fac9 	bl	8002dd8 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); //Green LED
 8000846:	2108      	movs	r1, #8
 8000848:	480a      	ldr	r0, [pc, #40]	@ (8000874 <StartTask3+0x4c>)
 800084a:	f000 fc72 	bl	8001132 <HAL_GPIO_TogglePin>
	  osDelay(10000);//phase 3
 800084e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000852:	f002 fac1 	bl	8002dd8 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 8000856:	2108      	movs	r1, #8
 8000858:	4806      	ldr	r0, [pc, #24]	@ (8000874 <StartTask3+0x4c>)
 800085a:	f000 fc6a 	bl	8001132 <HAL_GPIO_TogglePin>
	  osDelay(3000);//phase 4
 800085e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000862:	f002 fab9 	bl	8002dd8 <osDelay>
	  HAL_UART_Transmit(&huart2, dataTask3, sizeof(dataTask3), 1000);
 8000866:	bf00      	nop
 8000868:	e7e2      	b.n	8000830 <StartTask3+0x8>
 800086a:	bf00      	nop
 800086c:	20000000 	.word	0x20000000
 8000870:	200000a4 	.word	0x200000a4
 8000874:	40020400 	.word	0x40020400

08000878 <StartTask4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask4 */
void StartTask4(void *argument)
{
 8000878:	b5b0      	push	{r4, r5, r7, lr}
 800087a:	b08e      	sub	sp, #56	@ 0x38
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask4 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(25000);
 8000880:	f246 10a8 	movw	r0, #25000	@ 0x61a8
 8000884:	f002 faa8 	bl	8002dd8 <osDelay>
	  uint8_t dataTask4[] = "Task 4: Traffic Light phases all completed.\r\n";
 8000888:	4b0a      	ldr	r3, [pc, #40]	@ (80008b4 <StartTask4+0x3c>)
 800088a:	f107 0408 	add.w	r4, r7, #8
 800088e:	461d      	mov	r5, r3
 8000890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000894:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000898:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800089c:	c407      	stmia	r4!, {r0, r1, r2}
 800089e:	8023      	strh	r3, [r4, #0]
	  HAL_UART_Transmit(&huart2, dataTask4, sizeof(dataTask4), 1000);
 80008a0:	f107 0108 	add.w	r1, r7, #8
 80008a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008a8:	222e      	movs	r2, #46	@ 0x2e
 80008aa:	4803      	ldr	r0, [pc, #12]	@ (80008b8 <StartTask4+0x40>)
 80008ac:	f001 fdb8 	bl	8002420 <HAL_UART_Transmit>
  {
 80008b0:	bf00      	nop
 80008b2:	e7e5      	b.n	8000880 <StartTask4+0x8>
 80008b4:	08005988 	.word	0x08005988
 80008b8:	200000a4 	.word	0x200000a4

080008bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a04      	ldr	r2, [pc, #16]	@ (80008dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d101      	bne.n	80008d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ce:	f000 f981 	bl	8000bd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40001000 	.word	0x40001000

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <Error_Handler+0x8>

080008ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <HAL_MspInit+0x54>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008fa:	4a11      	ldr	r2, [pc, #68]	@ (8000940 <HAL_MspInit+0x54>)
 80008fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000900:	6453      	str	r3, [r2, #68]	@ 0x44
 8000902:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <HAL_MspInit+0x54>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000906:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	4b0b      	ldr	r3, [pc, #44]	@ (8000940 <HAL_MspInit+0x54>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000916:	4a0a      	ldr	r2, [pc, #40]	@ (8000940 <HAL_MspInit+0x54>)
 8000918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800091c:	6413      	str	r3, [r2, #64]	@ 0x40
 800091e:	4b08      	ldr	r3, [pc, #32]	@ (8000940 <HAL_MspInit+0x54>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	210f      	movs	r1, #15
 800092e:	f06f 0001 	mvn.w	r0, #1
 8000932:	f000 fa27 	bl	8000d84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800

08000944 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	@ 0x28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a19      	ldr	r2, [pc, #100]	@ (80009c8 <HAL_UART_MspInit+0x84>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d12b      	bne.n	80009be <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	4b18      	ldr	r3, [pc, #96]	@ (80009cc <HAL_UART_MspInit+0x88>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096e:	4a17      	ldr	r2, [pc, #92]	@ (80009cc <HAL_UART_MspInit+0x88>)
 8000970:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000974:	6413      	str	r3, [r2, #64]	@ 0x40
 8000976:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <HAL_UART_MspInit+0x88>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <HAL_UART_MspInit+0x88>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a10      	ldr	r2, [pc, #64]	@ (80009cc <HAL_UART_MspInit+0x88>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <HAL_UART_MspInit+0x88>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800099e:	230c      	movs	r3, #12
 80009a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009aa:	2303      	movs	r3, #3
 80009ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ae:	2307      	movs	r3, #7
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4619      	mov	r1, r3
 80009b8:	4805      	ldr	r0, [pc, #20]	@ (80009d0 <HAL_UART_MspInit+0x8c>)
 80009ba:	f000 fa0d 	bl	8000dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009be:	bf00      	nop
 80009c0:	3728      	adds	r7, #40	@ 0x28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40004400 	.word	0x40004400
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020000 	.word	0x40020000

080009d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08e      	sub	sp, #56	@ 0x38
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009dc:	2300      	movs	r3, #0
 80009de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	4b33      	ldr	r3, [pc, #204]	@ (8000ab8 <HAL_InitTick+0xe4>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ec:	4a32      	ldr	r2, [pc, #200]	@ (8000ab8 <HAL_InitTick+0xe4>)
 80009ee:	f043 0310 	orr.w	r3, r3, #16
 80009f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f4:	4b30      	ldr	r3, [pc, #192]	@ (8000ab8 <HAL_InitTick+0xe4>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f8:	f003 0310 	and.w	r3, r3, #16
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a00:	f107 0210 	add.w	r2, r7, #16
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	4611      	mov	r1, r2
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 fd16 	bl	800143c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a10:	6a3b      	ldr	r3, [r7, #32]
 8000a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d103      	bne.n	8000a22 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a1a:	f000 fce7 	bl	80013ec <HAL_RCC_GetPCLK1Freq>
 8000a1e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a20:	e004      	b.n	8000a2c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a22:	f000 fce3 	bl	80013ec <HAL_RCC_GetPCLK1Freq>
 8000a26:	4603      	mov	r3, r0
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a2e:	4a23      	ldr	r2, [pc, #140]	@ (8000abc <HAL_InitTick+0xe8>)
 8000a30:	fba2 2303 	umull	r2, r3, r2, r3
 8000a34:	0c9b      	lsrs	r3, r3, #18
 8000a36:	3b01      	subs	r3, #1
 8000a38:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a3a:	4b21      	ldr	r3, [pc, #132]	@ (8000ac0 <HAL_InitTick+0xec>)
 8000a3c:	4a21      	ldr	r2, [pc, #132]	@ (8000ac4 <HAL_InitTick+0xf0>)
 8000a3e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a40:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac0 <HAL_InitTick+0xec>)
 8000a42:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a46:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a48:	4a1d      	ldr	r2, [pc, #116]	@ (8000ac0 <HAL_InitTick+0xec>)
 8000a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a4c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac0 <HAL_InitTick+0xec>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a54:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac0 <HAL_InitTick+0xec>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5a:	4b19      	ldr	r3, [pc, #100]	@ (8000ac0 <HAL_InitTick+0xec>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a60:	4817      	ldr	r0, [pc, #92]	@ (8000ac0 <HAL_InitTick+0xec>)
 8000a62:	f001 f9eb 	bl	8001e3c <HAL_TIM_Base_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a6c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d11b      	bne.n	8000aac <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a74:	4812      	ldr	r0, [pc, #72]	@ (8000ac0 <HAL_InitTick+0xec>)
 8000a76:	f001 fa3b 	bl	8001ef0 <HAL_TIM_Base_Start_IT>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a80:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d111      	bne.n	8000aac <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a88:	2036      	movs	r0, #54	@ 0x36
 8000a8a:	f000 f997 	bl	8000dbc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b0f      	cmp	r3, #15
 8000a92:	d808      	bhi.n	8000aa6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a94:	2200      	movs	r2, #0
 8000a96:	6879      	ldr	r1, [r7, #4]
 8000a98:	2036      	movs	r0, #54	@ 0x36
 8000a9a:	f000 f973 	bl	8000d84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac8 <HAL_InitTick+0xf4>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6013      	str	r3, [r2, #0]
 8000aa4:	e002      	b.n	8000aac <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000aac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3738      	adds	r7, #56	@ 0x38
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	431bde83 	.word	0x431bde83
 8000ac0:	200000fc 	.word	0x200000fc
 8000ac4:	40001000 	.word	0x40001000
 8000ac8:	2000002c 	.word	0x2000002c

08000acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <NMI_Handler+0x4>

08000ad4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <HardFault_Handler+0x4>

08000adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <MemManage_Handler+0x4>

08000ae4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <BusFault_Handler+0x4>

08000aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <UsageFault_Handler+0x4>

08000af4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
	...

08000b04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b08:	4802      	ldr	r0, [pc, #8]	@ (8000b14 <TIM6_DAC_IRQHandler+0x10>)
 8000b0a:	f001 fa61 	bl	8001fd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200000fc 	.word	0x200000fc

08000b18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b1c:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <SystemInit+0x20>)
 8000b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b22:	4a05      	ldr	r2, [pc, #20]	@ (8000b38 <SystemInit+0x20>)
 8000b24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b74 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b40:	f7ff ffea 	bl	8000b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b44:	480c      	ldr	r0, [pc, #48]	@ (8000b78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b46:	490d      	ldr	r1, [pc, #52]	@ (8000b7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b48:	4a0d      	ldr	r2, [pc, #52]	@ (8000b80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b4c:	e002      	b.n	8000b54 <LoopCopyDataInit>

08000b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b52:	3304      	adds	r3, #4

08000b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b58:	d3f9      	bcc.n	8000b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b60:	e001      	b.n	8000b66 <LoopFillZerobss>

08000b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b64:	3204      	adds	r2, #4

08000b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b68:	d3fb      	bcc.n	8000b62 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b6a:	f004 fe63 	bl	8005834 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6e:	f7ff fcc7 	bl	8000500 <main>
  bx  lr    
 8000b72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b7c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000b80:	08005a88 	.word	0x08005a88
  ldr r2, =_sbss
 8000b84:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000b88:	20004c70 	.word	0x20004c70

08000b8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b8c:	e7fe      	b.n	8000b8c <ADC_IRQHandler>
	...

08000b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b94:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd0 <HAL_Init+0x40>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd0 <HAL_Init+0x40>)
 8000b9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd0 <HAL_Init+0x40>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd0 <HAL_Init+0x40>)
 8000ba6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000baa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bac:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <HAL_Init+0x40>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a07      	ldr	r2, [pc, #28]	@ (8000bd0 <HAL_Init+0x40>)
 8000bb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f000 f8d8 	bl	8000d6e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bbe:	200f      	movs	r0, #15
 8000bc0:	f7ff ff08 	bl	80009d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc4:	f7ff fe92 	bl	80008ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40023c00 	.word	0x40023c00

08000bd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <HAL_IncTick+0x20>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <HAL_IncTick+0x24>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	4a04      	ldr	r2, [pc, #16]	@ (8000bf8 <HAL_IncTick+0x24>)
 8000be6:	6013      	str	r3, [r2, #0]
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000030 	.word	0x20000030
 8000bf8:	20000144 	.word	0x20000144

08000bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000c00:	4b03      	ldr	r3, [pc, #12]	@ (8000c10 <HAL_GetTick+0x14>)
 8000c02:	681b      	ldr	r3, [r3, #0]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000144 	.word	0x20000144

08000c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c24:	4b0c      	ldr	r3, [pc, #48]	@ (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c30:	4013      	ands	r3, r2
 8000c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c46:	4a04      	ldr	r2, [pc, #16]	@ (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	60d3      	str	r3, [r2, #12]
}
 8000c4c:	bf00      	nop
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c60:	4b04      	ldr	r3, [pc, #16]	@ (8000c74 <__NVIC_GetPriorityGrouping+0x18>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	0a1b      	lsrs	r3, r3, #8
 8000c66:	f003 0307 	and.w	r3, r3, #7
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db0b      	blt.n	8000ca2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	f003 021f 	and.w	r2, r3, #31
 8000c90:	4907      	ldr	r1, [pc, #28]	@ (8000cb0 <__NVIC_EnableIRQ+0x38>)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	095b      	lsrs	r3, r3, #5
 8000c98:	2001      	movs	r0, #1
 8000c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000e100 	.word	0xe000e100

08000cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db0a      	blt.n	8000cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	490c      	ldr	r1, [pc, #48]	@ (8000d00 <__NVIC_SetPriority+0x4c>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	0112      	lsls	r2, r2, #4
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cdc:	e00a      	b.n	8000cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4908      	ldr	r1, [pc, #32]	@ (8000d04 <__NVIC_SetPriority+0x50>)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	3b04      	subs	r3, #4
 8000cec:	0112      	lsls	r2, r2, #4
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	761a      	strb	r2, [r3, #24]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000e100 	.word	0xe000e100
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	@ 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f1c3 0307 	rsb	r3, r3, #7
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	bf28      	it	cs
 8000d26:	2304      	movcs	r3, #4
 8000d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d902      	bls.n	8000d38 <NVIC_EncodePriority+0x30>
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3b03      	subs	r3, #3
 8000d36:	e000      	b.n	8000d3a <NVIC_EncodePriority+0x32>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43da      	mvns	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d50:	f04f 31ff 	mov.w	r1, #4294967295
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	43d9      	mvns	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	4313      	orrs	r3, r2
         );
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3724      	adds	r7, #36	@ 0x24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff ff4c 	bl	8000c14 <__NVIC_SetPriorityGrouping>
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
 8000d90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d96:	f7ff ff61 	bl	8000c5c <__NVIC_GetPriorityGrouping>
 8000d9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	68b9      	ldr	r1, [r7, #8]
 8000da0:	6978      	ldr	r0, [r7, #20]
 8000da2:	f7ff ffb1 	bl	8000d08 <NVIC_EncodePriority>
 8000da6:	4602      	mov	r2, r0
 8000da8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dac:	4611      	mov	r1, r2
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff ff80 	bl	8000cb4 <__NVIC_SetPriority>
}
 8000db4:	bf00      	nop
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff ff54 	bl	8000c78 <__NVIC_EnableIRQ>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b089      	sub	sp, #36	@ 0x24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
 8000df2:	e165      	b.n	80010c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000df4:	2201      	movs	r2, #1
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	f040 8154 	bne.w	80010ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 0303 	and.w	r3, r3, #3
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d005      	beq.n	8000e2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d130      	bne.n	8000e8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	2203      	movs	r2, #3
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	68da      	ldr	r2, [r3, #12]
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e60:	2201      	movs	r2, #1
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	091b      	lsrs	r3, r3, #4
 8000e76:	f003 0201 	and.w	r2, r3, #1
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0303 	and.w	r3, r3, #3
 8000e94:	2b03      	cmp	r3, #3
 8000e96:	d017      	beq.n	8000ec8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 0303 	and.w	r3, r3, #3
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d123      	bne.n	8000f1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	08da      	lsrs	r2, r3, #3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3208      	adds	r2, #8
 8000edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	f003 0307 	and.w	r3, r3, #7
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	220f      	movs	r2, #15
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	691a      	ldr	r2, [r3, #16]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	08da      	lsrs	r2, r3, #3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3208      	adds	r2, #8
 8000f16:	69b9      	ldr	r1, [r7, #24]
 8000f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	2203      	movs	r2, #3
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 0203 	and.w	r2, r3, #3
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	f000 80ae 	beq.w	80010ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	4b5d      	ldr	r3, [pc, #372]	@ (80010d8 <HAL_GPIO_Init+0x300>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f66:	4a5c      	ldr	r2, [pc, #368]	@ (80010d8 <HAL_GPIO_Init+0x300>)
 8000f68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f6e:	4b5a      	ldr	r3, [pc, #360]	@ (80010d8 <HAL_GPIO_Init+0x300>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f7a:	4a58      	ldr	r2, [pc, #352]	@ (80010dc <HAL_GPIO_Init+0x304>)
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	089b      	lsrs	r3, r3, #2
 8000f80:	3302      	adds	r3, #2
 8000f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	220f      	movs	r2, #15
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a4f      	ldr	r2, [pc, #316]	@ (80010e0 <HAL_GPIO_Init+0x308>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d025      	beq.n	8000ff2 <HAL_GPIO_Init+0x21a>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a4e      	ldr	r2, [pc, #312]	@ (80010e4 <HAL_GPIO_Init+0x30c>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d01f      	beq.n	8000fee <HAL_GPIO_Init+0x216>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a4d      	ldr	r2, [pc, #308]	@ (80010e8 <HAL_GPIO_Init+0x310>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d019      	beq.n	8000fea <HAL_GPIO_Init+0x212>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a4c      	ldr	r2, [pc, #304]	@ (80010ec <HAL_GPIO_Init+0x314>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d013      	beq.n	8000fe6 <HAL_GPIO_Init+0x20e>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a4b      	ldr	r2, [pc, #300]	@ (80010f0 <HAL_GPIO_Init+0x318>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d00d      	beq.n	8000fe2 <HAL_GPIO_Init+0x20a>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a4a      	ldr	r2, [pc, #296]	@ (80010f4 <HAL_GPIO_Init+0x31c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d007      	beq.n	8000fde <HAL_GPIO_Init+0x206>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a49      	ldr	r2, [pc, #292]	@ (80010f8 <HAL_GPIO_Init+0x320>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d101      	bne.n	8000fda <HAL_GPIO_Init+0x202>
 8000fd6:	2306      	movs	r3, #6
 8000fd8:	e00c      	b.n	8000ff4 <HAL_GPIO_Init+0x21c>
 8000fda:	2307      	movs	r3, #7
 8000fdc:	e00a      	b.n	8000ff4 <HAL_GPIO_Init+0x21c>
 8000fde:	2305      	movs	r3, #5
 8000fe0:	e008      	b.n	8000ff4 <HAL_GPIO_Init+0x21c>
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	e006      	b.n	8000ff4 <HAL_GPIO_Init+0x21c>
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e004      	b.n	8000ff4 <HAL_GPIO_Init+0x21c>
 8000fea:	2302      	movs	r3, #2
 8000fec:	e002      	b.n	8000ff4 <HAL_GPIO_Init+0x21c>
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e000      	b.n	8000ff4 <HAL_GPIO_Init+0x21c>
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	69fa      	ldr	r2, [r7, #28]
 8000ff6:	f002 0203 	and.w	r2, r2, #3
 8000ffa:	0092      	lsls	r2, r2, #2
 8000ffc:	4093      	lsls	r3, r2
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4313      	orrs	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001004:	4935      	ldr	r1, [pc, #212]	@ (80010dc <HAL_GPIO_Init+0x304>)
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	089b      	lsrs	r3, r3, #2
 800100a:	3302      	adds	r3, #2
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001012:	4b3a      	ldr	r3, [pc, #232]	@ (80010fc <HAL_GPIO_Init+0x324>)
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001036:	4a31      	ldr	r2, [pc, #196]	@ (80010fc <HAL_GPIO_Init+0x324>)
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800103c:	4b2f      	ldr	r3, [pc, #188]	@ (80010fc <HAL_GPIO_Init+0x324>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001060:	4a26      	ldr	r2, [pc, #152]	@ (80010fc <HAL_GPIO_Init+0x324>)
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001066:	4b25      	ldr	r3, [pc, #148]	@ (80010fc <HAL_GPIO_Init+0x324>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	43db      	mvns	r3, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4013      	ands	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800108a:	4a1c      	ldr	r2, [pc, #112]	@ (80010fc <HAL_GPIO_Init+0x324>)
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001090:	4b1a      	ldr	r3, [pc, #104]	@ (80010fc <HAL_GPIO_Init+0x324>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d003      	beq.n	80010b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010b4:	4a11      	ldr	r2, [pc, #68]	@ (80010fc <HAL_GPIO_Init+0x324>)
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3301      	adds	r3, #1
 80010be:	61fb      	str	r3, [r7, #28]
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	2b0f      	cmp	r3, #15
 80010c4:	f67f ae96 	bls.w	8000df4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010c8:	bf00      	nop
 80010ca:	bf00      	nop
 80010cc:	3724      	adds	r7, #36	@ 0x24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40013800 	.word	0x40013800
 80010e0:	40020000 	.word	0x40020000
 80010e4:	40020400 	.word	0x40020400
 80010e8:	40020800 	.word	0x40020800
 80010ec:	40020c00 	.word	0x40020c00
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40021400 	.word	0x40021400
 80010f8:	40021800 	.word	0x40021800
 80010fc:	40013c00 	.word	0x40013c00

08001100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	807b      	strh	r3, [r7, #2]
 800110c:	4613      	mov	r3, r2
 800110e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001110:	787b      	ldrb	r3, [r7, #1]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001116:	887a      	ldrh	r2, [r7, #2]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800111c:	e003      	b.n	8001126 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800111e:	887b      	ldrh	r3, [r7, #2]
 8001120:	041a      	lsls	r2, r3, #16
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	619a      	str	r2, [r3, #24]
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001132:	b480      	push	{r7}
 8001134:	b085      	sub	sp, #20
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	460b      	mov	r3, r1
 800113c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001144:	887a      	ldrh	r2, [r7, #2]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4013      	ands	r3, r2
 800114a:	041a      	lsls	r2, r3, #16
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	43d9      	mvns	r1, r3
 8001150:	887b      	ldrh	r3, [r7, #2]
 8001152:	400b      	ands	r3, r1
 8001154:	431a      	orrs	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	619a      	str	r2, [r3, #24]
}
 800115a:	bf00      	nop
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	603b      	str	r3, [r7, #0]
 8001176:	4b20      	ldr	r3, [pc, #128]	@ (80011f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117a:	4a1f      	ldr	r2, [pc, #124]	@ (80011f8 <HAL_PWREx_EnableOverDrive+0x90>)
 800117c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001180:	6413      	str	r3, [r2, #64]	@ 0x40
 8001182:	4b1d      	ldr	r3, [pc, #116]	@ (80011f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800118e:	4b1b      	ldr	r3, [pc, #108]	@ (80011fc <HAL_PWREx_EnableOverDrive+0x94>)
 8001190:	2201      	movs	r2, #1
 8001192:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001194:	f7ff fd32 	bl	8000bfc <HAL_GetTick>
 8001198:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800119a:	e009      	b.n	80011b0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800119c:	f7ff fd2e 	bl	8000bfc <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011aa:	d901      	bls.n	80011b0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e01f      	b.n	80011f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011b0:	4b13      	ldr	r3, [pc, #76]	@ (8001200 <HAL_PWREx_EnableOverDrive+0x98>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011bc:	d1ee      	bne.n	800119c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80011be:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <HAL_PWREx_EnableOverDrive+0x9c>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011c4:	f7ff fd1a 	bl	8000bfc <HAL_GetTick>
 80011c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011ca:	e009      	b.n	80011e0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011cc:	f7ff fd16 	bl	8000bfc <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011da:	d901      	bls.n	80011e0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e007      	b.n	80011f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011e0:	4b07      	ldr	r3, [pc, #28]	@ (8001200 <HAL_PWREx_EnableOverDrive+0x98>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80011ec:	d1ee      	bne.n	80011cc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40023800 	.word	0x40023800
 80011fc:	420e0040 	.word	0x420e0040
 8001200:	40007000 	.word	0x40007000
 8001204:	420e0044 	.word	0x420e0044

08001208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d101      	bne.n	800121c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e0cc      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800121c:	4b68      	ldr	r3, [pc, #416]	@ (80013c0 <HAL_RCC_ClockConfig+0x1b8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 030f 	and.w	r3, r3, #15
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	429a      	cmp	r2, r3
 8001228:	d90c      	bls.n	8001244 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800122a:	4b65      	ldr	r3, [pc, #404]	@ (80013c0 <HAL_RCC_ClockConfig+0x1b8>)
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001232:	4b63      	ldr	r3, [pc, #396]	@ (80013c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	429a      	cmp	r2, r3
 800123e:	d001      	beq.n	8001244 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e0b8      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d020      	beq.n	8001292 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0304 	and.w	r3, r3, #4
 8001258:	2b00      	cmp	r3, #0
 800125a:	d005      	beq.n	8001268 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800125c:	4b59      	ldr	r3, [pc, #356]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	4a58      	ldr	r2, [pc, #352]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001262:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001266:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0308 	and.w	r3, r3, #8
 8001270:	2b00      	cmp	r3, #0
 8001272:	d005      	beq.n	8001280 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001274:	4b53      	ldr	r3, [pc, #332]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	4a52      	ldr	r2, [pc, #328]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 800127a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800127e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001280:	4b50      	ldr	r3, [pc, #320]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	494d      	ldr	r1, [pc, #308]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 800128e:	4313      	orrs	r3, r2
 8001290:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b00      	cmp	r3, #0
 800129c:	d044      	beq.n	8001328 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d107      	bne.n	80012b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a6:	4b47      	ldr	r3, [pc, #284]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d119      	bne.n	80012e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e07f      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d003      	beq.n	80012c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d107      	bne.n	80012d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012c6:	4b3f      	ldr	r3, [pc, #252]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d109      	bne.n	80012e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e06f      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d6:	4b3b      	ldr	r3, [pc, #236]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e067      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012e6:	4b37      	ldr	r3, [pc, #220]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f023 0203 	bic.w	r2, r3, #3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	4934      	ldr	r1, [pc, #208]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 80012f4:	4313      	orrs	r3, r2
 80012f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012f8:	f7ff fc80 	bl	8000bfc <HAL_GetTick>
 80012fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012fe:	e00a      	b.n	8001316 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001300:	f7ff fc7c 	bl	8000bfc <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800130e:	4293      	cmp	r3, r2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e04f      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001316:	4b2b      	ldr	r3, [pc, #172]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 020c 	and.w	r2, r3, #12
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	429a      	cmp	r2, r3
 8001326:	d1eb      	bne.n	8001300 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001328:	4b25      	ldr	r3, [pc, #148]	@ (80013c0 <HAL_RCC_ClockConfig+0x1b8>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 030f 	and.w	r3, r3, #15
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	429a      	cmp	r2, r3
 8001334:	d20c      	bcs.n	8001350 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001336:	4b22      	ldr	r3, [pc, #136]	@ (80013c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800133e:	4b20      	ldr	r3, [pc, #128]	@ (80013c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	429a      	cmp	r2, r3
 800134a:	d001      	beq.n	8001350 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e032      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	2b00      	cmp	r3, #0
 800135a:	d008      	beq.n	800136e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800135c:	4b19      	ldr	r3, [pc, #100]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	4916      	ldr	r1, [pc, #88]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 800136a:	4313      	orrs	r3, r2
 800136c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	2b00      	cmp	r3, #0
 8001378:	d009      	beq.n	800138e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800137a:	4b12      	ldr	r3, [pc, #72]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	490e      	ldr	r1, [pc, #56]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 800138a:	4313      	orrs	r3, r2
 800138c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800138e:	f000 f887 	bl	80014a0 <HAL_RCC_GetSysClockFreq>
 8001392:	4602      	mov	r2, r0
 8001394:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	091b      	lsrs	r3, r3, #4
 800139a:	f003 030f 	and.w	r3, r3, #15
 800139e:	490a      	ldr	r1, [pc, #40]	@ (80013c8 <HAL_RCC_ClockConfig+0x1c0>)
 80013a0:	5ccb      	ldrb	r3, [r1, r3]
 80013a2:	fa22 f303 	lsr.w	r3, r2, r3
 80013a6:	4a09      	ldr	r2, [pc, #36]	@ (80013cc <HAL_RCC_ClockConfig+0x1c4>)
 80013a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80013aa:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c8>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fb10 	bl	80009d4 <HAL_InitTick>

  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023c00 	.word	0x40023c00
 80013c4:	40023800 	.word	0x40023800
 80013c8:	08005a60 	.word	0x08005a60
 80013cc:	20000028 	.word	0x20000028
 80013d0:	2000002c 	.word	0x2000002c

080013d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013d8:	4b03      	ldr	r3, [pc, #12]	@ (80013e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80013da:	681b      	ldr	r3, [r3, #0]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000028 	.word	0x20000028

080013ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013f0:	f7ff fff0 	bl	80013d4 <HAL_RCC_GetHCLKFreq>
 80013f4:	4602      	mov	r2, r0
 80013f6:	4b05      	ldr	r3, [pc, #20]	@ (800140c <HAL_RCC_GetPCLK1Freq+0x20>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	0a9b      	lsrs	r3, r3, #10
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	4903      	ldr	r1, [pc, #12]	@ (8001410 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001402:	5ccb      	ldrb	r3, [r1, r3]
 8001404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001408:	4618      	mov	r0, r3
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40023800 	.word	0x40023800
 8001410:	08005a70 	.word	0x08005a70

08001414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001418:	f7ff ffdc 	bl	80013d4 <HAL_RCC_GetHCLKFreq>
 800141c:	4602      	mov	r2, r0
 800141e:	4b05      	ldr	r3, [pc, #20]	@ (8001434 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	0b5b      	lsrs	r3, r3, #13
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	4903      	ldr	r1, [pc, #12]	@ (8001438 <HAL_RCC_GetPCLK2Freq+0x24>)
 800142a:	5ccb      	ldrb	r3, [r1, r3]
 800142c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001430:	4618      	mov	r0, r3
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40023800 	.word	0x40023800
 8001438:	08005a70 	.word	0x08005a70

0800143c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	220f      	movs	r2, #15
 800144a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800144c:	4b12      	ldr	r3, [pc, #72]	@ (8001498 <HAL_RCC_GetClockConfig+0x5c>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f003 0203 	and.w	r2, r3, #3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001458:	4b0f      	ldr	r3, [pc, #60]	@ (8001498 <HAL_RCC_GetClockConfig+0x5c>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001464:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <HAL_RCC_GetClockConfig+0x5c>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001470:	4b09      	ldr	r3, [pc, #36]	@ (8001498 <HAL_RCC_GetClockConfig+0x5c>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	08db      	lsrs	r3, r3, #3
 8001476:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800147e:	4b07      	ldr	r3, [pc, #28]	@ (800149c <HAL_RCC_GetClockConfig+0x60>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 020f 	and.w	r2, r3, #15
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	601a      	str	r2, [r3, #0]
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800
 800149c:	40023c00 	.word	0x40023c00

080014a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014a4:	b0ae      	sub	sp, #184	@ 0xb8
 80014a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014c6:	4bcb      	ldr	r3, [pc, #812]	@ (80017f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	2b0c      	cmp	r3, #12
 80014d0:	f200 8206 	bhi.w	80018e0 <HAL_RCC_GetSysClockFreq+0x440>
 80014d4:	a201      	add	r2, pc, #4	@ (adr r2, 80014dc <HAL_RCC_GetSysClockFreq+0x3c>)
 80014d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014da:	bf00      	nop
 80014dc:	08001511 	.word	0x08001511
 80014e0:	080018e1 	.word	0x080018e1
 80014e4:	080018e1 	.word	0x080018e1
 80014e8:	080018e1 	.word	0x080018e1
 80014ec:	08001519 	.word	0x08001519
 80014f0:	080018e1 	.word	0x080018e1
 80014f4:	080018e1 	.word	0x080018e1
 80014f8:	080018e1 	.word	0x080018e1
 80014fc:	08001521 	.word	0x08001521
 8001500:	080018e1 	.word	0x080018e1
 8001504:	080018e1 	.word	0x080018e1
 8001508:	080018e1 	.word	0x080018e1
 800150c:	08001711 	.word	0x08001711
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001510:	4bb9      	ldr	r3, [pc, #740]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001512:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001516:	e1e7      	b.n	80018e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001518:	4bb8      	ldr	r3, [pc, #736]	@ (80017fc <HAL_RCC_GetSysClockFreq+0x35c>)
 800151a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800151e:	e1e3      	b.n	80018e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001520:	4bb4      	ldr	r3, [pc, #720]	@ (80017f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001528:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800152c:	4bb1      	ldr	r3, [pc, #708]	@ (80017f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d071      	beq.n	800161c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001538:	4bae      	ldr	r3, [pc, #696]	@ (80017f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	099b      	lsrs	r3, r3, #6
 800153e:	2200      	movs	r2, #0
 8001540:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001544:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001548:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800154c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001550:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001554:	2300      	movs	r3, #0
 8001556:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800155a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800155e:	4622      	mov	r2, r4
 8001560:	462b      	mov	r3, r5
 8001562:	f04f 0000 	mov.w	r0, #0
 8001566:	f04f 0100 	mov.w	r1, #0
 800156a:	0159      	lsls	r1, r3, #5
 800156c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001570:	0150      	lsls	r0, r2, #5
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4621      	mov	r1, r4
 8001578:	1a51      	subs	r1, r2, r1
 800157a:	6439      	str	r1, [r7, #64]	@ 0x40
 800157c:	4629      	mov	r1, r5
 800157e:	eb63 0301 	sbc.w	r3, r3, r1
 8001582:	647b      	str	r3, [r7, #68]	@ 0x44
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	f04f 0300 	mov.w	r3, #0
 800158c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001590:	4649      	mov	r1, r9
 8001592:	018b      	lsls	r3, r1, #6
 8001594:	4641      	mov	r1, r8
 8001596:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800159a:	4641      	mov	r1, r8
 800159c:	018a      	lsls	r2, r1, #6
 800159e:	4641      	mov	r1, r8
 80015a0:	1a51      	subs	r1, r2, r1
 80015a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80015a4:	4649      	mov	r1, r9
 80015a6:	eb63 0301 	sbc.w	r3, r3, r1
 80015aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	f04f 0300 	mov.w	r3, #0
 80015b4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80015b8:	4649      	mov	r1, r9
 80015ba:	00cb      	lsls	r3, r1, #3
 80015bc:	4641      	mov	r1, r8
 80015be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015c2:	4641      	mov	r1, r8
 80015c4:	00ca      	lsls	r2, r1, #3
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	4603      	mov	r3, r0
 80015cc:	4622      	mov	r2, r4
 80015ce:	189b      	adds	r3, r3, r2
 80015d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80015d2:	462b      	mov	r3, r5
 80015d4:	460a      	mov	r2, r1
 80015d6:	eb42 0303 	adc.w	r3, r2, r3
 80015da:	637b      	str	r3, [r7, #52]	@ 0x34
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	f04f 0300 	mov.w	r3, #0
 80015e4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80015e8:	4629      	mov	r1, r5
 80015ea:	024b      	lsls	r3, r1, #9
 80015ec:	4621      	mov	r1, r4
 80015ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80015f2:	4621      	mov	r1, r4
 80015f4:	024a      	lsls	r2, r1, #9
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015fe:	2200      	movs	r2, #0
 8001600:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001604:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001608:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800160c:	f7fe fe00 	bl	8000210 <__aeabi_uldivmod>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4613      	mov	r3, r2
 8001616:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800161a:	e067      	b.n	80016ec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800161c:	4b75      	ldr	r3, [pc, #468]	@ (80017f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	099b      	lsrs	r3, r3, #6
 8001622:	2200      	movs	r2, #0
 8001624:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001628:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800162c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001634:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001636:	2300      	movs	r3, #0
 8001638:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800163a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800163e:	4622      	mov	r2, r4
 8001640:	462b      	mov	r3, r5
 8001642:	f04f 0000 	mov.w	r0, #0
 8001646:	f04f 0100 	mov.w	r1, #0
 800164a:	0159      	lsls	r1, r3, #5
 800164c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001650:	0150      	lsls	r0, r2, #5
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4621      	mov	r1, r4
 8001658:	1a51      	subs	r1, r2, r1
 800165a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800165c:	4629      	mov	r1, r5
 800165e:	eb63 0301 	sbc.w	r3, r3, r1
 8001662:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	f04f 0300 	mov.w	r3, #0
 800166c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001670:	4649      	mov	r1, r9
 8001672:	018b      	lsls	r3, r1, #6
 8001674:	4641      	mov	r1, r8
 8001676:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800167a:	4641      	mov	r1, r8
 800167c:	018a      	lsls	r2, r1, #6
 800167e:	4641      	mov	r1, r8
 8001680:	ebb2 0a01 	subs.w	sl, r2, r1
 8001684:	4649      	mov	r1, r9
 8001686:	eb63 0b01 	sbc.w	fp, r3, r1
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	f04f 0300 	mov.w	r3, #0
 8001692:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001696:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800169a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800169e:	4692      	mov	sl, r2
 80016a0:	469b      	mov	fp, r3
 80016a2:	4623      	mov	r3, r4
 80016a4:	eb1a 0303 	adds.w	r3, sl, r3
 80016a8:	623b      	str	r3, [r7, #32]
 80016aa:	462b      	mov	r3, r5
 80016ac:	eb4b 0303 	adc.w	r3, fp, r3
 80016b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	f04f 0300 	mov.w	r3, #0
 80016ba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80016be:	4629      	mov	r1, r5
 80016c0:	028b      	lsls	r3, r1, #10
 80016c2:	4621      	mov	r1, r4
 80016c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016c8:	4621      	mov	r1, r4
 80016ca:	028a      	lsls	r2, r1, #10
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016d4:	2200      	movs	r2, #0
 80016d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80016d8:	677a      	str	r2, [r7, #116]	@ 0x74
 80016da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80016de:	f7fe fd97 	bl	8000210 <__aeabi_uldivmod>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4613      	mov	r3, r2
 80016e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016ec:	4b41      	ldr	r3, [pc, #260]	@ (80017f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	0c1b      	lsrs	r3, r3, #16
 80016f2:	f003 0303 	and.w	r3, r3, #3
 80016f6:	3301      	adds	r3, #1
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80016fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001702:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001706:	fbb2 f3f3 	udiv	r3, r2, r3
 800170a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800170e:	e0eb      	b.n	80018e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001710:	4b38      	ldr	r3, [pc, #224]	@ (80017f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001718:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800171c:	4b35      	ldr	r3, [pc, #212]	@ (80017f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d06b      	beq.n	8001800 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001728:	4b32      	ldr	r3, [pc, #200]	@ (80017f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	099b      	lsrs	r3, r3, #6
 800172e:	2200      	movs	r2, #0
 8001730:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001732:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001734:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800173a:	663b      	str	r3, [r7, #96]	@ 0x60
 800173c:	2300      	movs	r3, #0
 800173e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001740:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001744:	4622      	mov	r2, r4
 8001746:	462b      	mov	r3, r5
 8001748:	f04f 0000 	mov.w	r0, #0
 800174c:	f04f 0100 	mov.w	r1, #0
 8001750:	0159      	lsls	r1, r3, #5
 8001752:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001756:	0150      	lsls	r0, r2, #5
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4621      	mov	r1, r4
 800175e:	1a51      	subs	r1, r2, r1
 8001760:	61b9      	str	r1, [r7, #24]
 8001762:	4629      	mov	r1, r5
 8001764:	eb63 0301 	sbc.w	r3, r3, r1
 8001768:	61fb      	str	r3, [r7, #28]
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	f04f 0300 	mov.w	r3, #0
 8001772:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001776:	4659      	mov	r1, fp
 8001778:	018b      	lsls	r3, r1, #6
 800177a:	4651      	mov	r1, sl
 800177c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001780:	4651      	mov	r1, sl
 8001782:	018a      	lsls	r2, r1, #6
 8001784:	4651      	mov	r1, sl
 8001786:	ebb2 0801 	subs.w	r8, r2, r1
 800178a:	4659      	mov	r1, fp
 800178c:	eb63 0901 	sbc.w	r9, r3, r1
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800179c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017a4:	4690      	mov	r8, r2
 80017a6:	4699      	mov	r9, r3
 80017a8:	4623      	mov	r3, r4
 80017aa:	eb18 0303 	adds.w	r3, r8, r3
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	462b      	mov	r3, r5
 80017b2:	eb49 0303 	adc.w	r3, r9, r3
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	f04f 0300 	mov.w	r3, #0
 80017c0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80017c4:	4629      	mov	r1, r5
 80017c6:	024b      	lsls	r3, r1, #9
 80017c8:	4621      	mov	r1, r4
 80017ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017ce:	4621      	mov	r1, r4
 80017d0:	024a      	lsls	r2, r1, #9
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017da:	2200      	movs	r2, #0
 80017dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80017de:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80017e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80017e4:	f7fe fd14 	bl	8000210 <__aeabi_uldivmod>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4613      	mov	r3, r2
 80017ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80017f2:	e065      	b.n	80018c0 <HAL_RCC_GetSysClockFreq+0x420>
 80017f4:	40023800 	.word	0x40023800
 80017f8:	00f42400 	.word	0x00f42400
 80017fc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001800:	4b3d      	ldr	r3, [pc, #244]	@ (80018f8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	099b      	lsrs	r3, r3, #6
 8001806:	2200      	movs	r2, #0
 8001808:	4618      	mov	r0, r3
 800180a:	4611      	mov	r1, r2
 800180c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001810:	653b      	str	r3, [r7, #80]	@ 0x50
 8001812:	2300      	movs	r3, #0
 8001814:	657b      	str	r3, [r7, #84]	@ 0x54
 8001816:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800181a:	4642      	mov	r2, r8
 800181c:	464b      	mov	r3, r9
 800181e:	f04f 0000 	mov.w	r0, #0
 8001822:	f04f 0100 	mov.w	r1, #0
 8001826:	0159      	lsls	r1, r3, #5
 8001828:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800182c:	0150      	lsls	r0, r2, #5
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4641      	mov	r1, r8
 8001834:	1a51      	subs	r1, r2, r1
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	4649      	mov	r1, r9
 800183a:	eb63 0301 	sbc.w	r3, r3, r1
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800184c:	4659      	mov	r1, fp
 800184e:	018b      	lsls	r3, r1, #6
 8001850:	4651      	mov	r1, sl
 8001852:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001856:	4651      	mov	r1, sl
 8001858:	018a      	lsls	r2, r1, #6
 800185a:	4651      	mov	r1, sl
 800185c:	1a54      	subs	r4, r2, r1
 800185e:	4659      	mov	r1, fp
 8001860:	eb63 0501 	sbc.w	r5, r3, r1
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	00eb      	lsls	r3, r5, #3
 800186e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001872:	00e2      	lsls	r2, r4, #3
 8001874:	4614      	mov	r4, r2
 8001876:	461d      	mov	r5, r3
 8001878:	4643      	mov	r3, r8
 800187a:	18e3      	adds	r3, r4, r3
 800187c:	603b      	str	r3, [r7, #0]
 800187e:	464b      	mov	r3, r9
 8001880:	eb45 0303 	adc.w	r3, r5, r3
 8001884:	607b      	str	r3, [r7, #4]
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001892:	4629      	mov	r1, r5
 8001894:	028b      	lsls	r3, r1, #10
 8001896:	4621      	mov	r1, r4
 8001898:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800189c:	4621      	mov	r1, r4
 800189e:	028a      	lsls	r2, r1, #10
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018a8:	2200      	movs	r2, #0
 80018aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80018ac:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80018ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80018b2:	f7fe fcad 	bl	8000210 <__aeabi_uldivmod>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4613      	mov	r3, r2
 80018bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80018c0:	4b0d      	ldr	r3, [pc, #52]	@ (80018f8 <HAL_RCC_GetSysClockFreq+0x458>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	0f1b      	lsrs	r3, r3, #28
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80018ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80018d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80018d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80018de:	e003      	b.n	80018e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018e0:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x45c>)
 80018e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80018e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	37b8      	adds	r7, #184	@ 0xb8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800
 80018fc:	00f42400 	.word	0x00f42400

08001900 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e28d      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 8083 	beq.w	8001a26 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001920:	4b94      	ldr	r3, [pc, #592]	@ (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 030c 	and.w	r3, r3, #12
 8001928:	2b04      	cmp	r3, #4
 800192a:	d019      	beq.n	8001960 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800192c:	4b91      	ldr	r3, [pc, #580]	@ (8001b74 <HAL_RCC_OscConfig+0x274>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001934:	2b08      	cmp	r3, #8
 8001936:	d106      	bne.n	8001946 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001938:	4b8e      	ldr	r3, [pc, #568]	@ (8001b74 <HAL_RCC_OscConfig+0x274>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001940:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001944:	d00c      	beq.n	8001960 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001946:	4b8b      	ldr	r3, [pc, #556]	@ (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800194e:	2b0c      	cmp	r3, #12
 8001950:	d112      	bne.n	8001978 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001952:	4b88      	ldr	r3, [pc, #544]	@ (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800195a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800195e:	d10b      	bne.n	8001978 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001960:	4b84      	ldr	r3, [pc, #528]	@ (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d05b      	beq.n	8001a24 <HAL_RCC_OscConfig+0x124>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d157      	bne.n	8001a24 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e25a      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001980:	d106      	bne.n	8001990 <HAL_RCC_OscConfig+0x90>
 8001982:	4b7c      	ldr	r3, [pc, #496]	@ (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a7b      	ldr	r2, [pc, #492]	@ (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001988:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	e01d      	b.n	80019cc <HAL_RCC_OscConfig+0xcc>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001998:	d10c      	bne.n	80019b4 <HAL_RCC_OscConfig+0xb4>
 800199a:	4b76      	ldr	r3, [pc, #472]	@ (8001b74 <HAL_RCC_OscConfig+0x274>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a75      	ldr	r2, [pc, #468]	@ (8001b74 <HAL_RCC_OscConfig+0x274>)
 80019a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	4b73      	ldr	r3, [pc, #460]	@ (8001b74 <HAL_RCC_OscConfig+0x274>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a72      	ldr	r2, [pc, #456]	@ (8001b74 <HAL_RCC_OscConfig+0x274>)
 80019ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	e00b      	b.n	80019cc <HAL_RCC_OscConfig+0xcc>
 80019b4:	4b6f      	ldr	r3, [pc, #444]	@ (8001b74 <HAL_RCC_OscConfig+0x274>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a6e      	ldr	r2, [pc, #440]	@ (8001b74 <HAL_RCC_OscConfig+0x274>)
 80019ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	4b6c      	ldr	r3, [pc, #432]	@ (8001b74 <HAL_RCC_OscConfig+0x274>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a6b      	ldr	r2, [pc, #428]	@ (8001b74 <HAL_RCC_OscConfig+0x274>)
 80019c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d013      	beq.n	80019fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d4:	f7ff f912 	bl	8000bfc <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019dc:	f7ff f90e 	bl	8000bfc <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b64      	cmp	r3, #100	@ 0x64
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e21f      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ee:	4b61      	ldr	r3, [pc, #388]	@ (8001b74 <HAL_RCC_OscConfig+0x274>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0xdc>
 80019fa:	e014      	b.n	8001a26 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fc:	f7ff f8fe 	bl	8000bfc <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a04:	f7ff f8fa 	bl	8000bfc <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b64      	cmp	r3, #100	@ 0x64
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e20b      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a16:	4b57      	ldr	r3, [pc, #348]	@ (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x104>
 8001a22:	e000      	b.n	8001a26 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d06f      	beq.n	8001b12 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a32:	4b50      	ldr	r3, [pc, #320]	@ (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 030c 	and.w	r3, r3, #12
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d017      	beq.n	8001a6e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a3e:	4b4d      	ldr	r3, [pc, #308]	@ (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a46:	2b08      	cmp	r3, #8
 8001a48:	d105      	bne.n	8001a56 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a4a:	4b4a      	ldr	r3, [pc, #296]	@ (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00b      	beq.n	8001a6e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a56:	4b47      	ldr	r3, [pc, #284]	@ (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a5e:	2b0c      	cmp	r3, #12
 8001a60:	d11c      	bne.n	8001a9c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a62:	4b44      	ldr	r3, [pc, #272]	@ (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d116      	bne.n	8001a9c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a6e:	4b41      	ldr	r3, [pc, #260]	@ (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d005      	beq.n	8001a86 <HAL_RCC_OscConfig+0x186>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d001      	beq.n	8001a86 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e1d3      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a86:	4b3b      	ldr	r3, [pc, #236]	@ (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4937      	ldr	r1, [pc, #220]	@ (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9a:	e03a      	b.n	8001b12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d020      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aa4:	4b34      	ldr	r3, [pc, #208]	@ (8001b78 <HAL_RCC_OscConfig+0x278>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aaa:	f7ff f8a7 	bl	8000bfc <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ab2:	f7ff f8a3 	bl	8000bfc <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e1b4      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac4:	4b2b      	ldr	r3, [pc, #172]	@ (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0f0      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad0:	4b28      	ldr	r3, [pc, #160]	@ (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	4925      	ldr	r1, [pc, #148]	@ (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	600b      	str	r3, [r1, #0]
 8001ae4:	e015      	b.n	8001b12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ae6:	4b24      	ldr	r3, [pc, #144]	@ (8001b78 <HAL_RCC_OscConfig+0x278>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aec:	f7ff f886 	bl	8000bfc <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001af4:	f7ff f882 	bl	8000bfc <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e193      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b06:	4b1b      	ldr	r3, [pc, #108]	@ (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d036      	beq.n	8001b8c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d016      	beq.n	8001b54 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b26:	4b15      	ldr	r3, [pc, #84]	@ (8001b7c <HAL_RCC_OscConfig+0x27c>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2c:	f7ff f866 	bl	8000bfc <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b34:	f7ff f862 	bl	8000bfc <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e173      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b46:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001b48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0x234>
 8001b52:	e01b      	b.n	8001b8c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b54:	4b09      	ldr	r3, [pc, #36]	@ (8001b7c <HAL_RCC_OscConfig+0x27c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5a:	f7ff f84f 	bl	8000bfc <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b60:	e00e      	b.n	8001b80 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b62:	f7ff f84b 	bl	8000bfc <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d907      	bls.n	8001b80 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e15c      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
 8001b74:	40023800 	.word	0x40023800
 8001b78:	42470000 	.word	0x42470000
 8001b7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b80:	4b8a      	ldr	r3, [pc, #552]	@ (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001b82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1ea      	bne.n	8001b62 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 8097 	beq.w	8001cc8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b9e:	4b83      	ldr	r3, [pc, #524]	@ (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10f      	bne.n	8001bca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	4b7f      	ldr	r3, [pc, #508]	@ (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb2:	4a7e      	ldr	r2, [pc, #504]	@ (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001bb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bba:	4b7c      	ldr	r3, [pc, #496]	@ (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bca:	4b79      	ldr	r3, [pc, #484]	@ (8001db0 <HAL_RCC_OscConfig+0x4b0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d118      	bne.n	8001c08 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bd6:	4b76      	ldr	r3, [pc, #472]	@ (8001db0 <HAL_RCC_OscConfig+0x4b0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a75      	ldr	r2, [pc, #468]	@ (8001db0 <HAL_RCC_OscConfig+0x4b0>)
 8001bdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001be2:	f7ff f80b 	bl	8000bfc <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bea:	f7ff f807 	bl	8000bfc <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e118      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfc:	4b6c      	ldr	r3, [pc, #432]	@ (8001db0 <HAL_RCC_OscConfig+0x4b0>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0f0      	beq.n	8001bea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d106      	bne.n	8001c1e <HAL_RCC_OscConfig+0x31e>
 8001c10:	4b66      	ldr	r3, [pc, #408]	@ (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c14:	4a65      	ldr	r2, [pc, #404]	@ (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c1c:	e01c      	b.n	8001c58 <HAL_RCC_OscConfig+0x358>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2b05      	cmp	r3, #5
 8001c24:	d10c      	bne.n	8001c40 <HAL_RCC_OscConfig+0x340>
 8001c26:	4b61      	ldr	r3, [pc, #388]	@ (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c2a:	4a60      	ldr	r2, [pc, #384]	@ (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001c2c:	f043 0304 	orr.w	r3, r3, #4
 8001c30:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c32:	4b5e      	ldr	r3, [pc, #376]	@ (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c36:	4a5d      	ldr	r2, [pc, #372]	@ (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c3e:	e00b      	b.n	8001c58 <HAL_RCC_OscConfig+0x358>
 8001c40:	4b5a      	ldr	r3, [pc, #360]	@ (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c44:	4a59      	ldr	r2, [pc, #356]	@ (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001c46:	f023 0301 	bic.w	r3, r3, #1
 8001c4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c4c:	4b57      	ldr	r3, [pc, #348]	@ (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c50:	4a56      	ldr	r2, [pc, #344]	@ (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001c52:	f023 0304 	bic.w	r3, r3, #4
 8001c56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d015      	beq.n	8001c8c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c60:	f7fe ffcc 	bl	8000bfc <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c66:	e00a      	b.n	8001c7e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c68:	f7fe ffc8 	bl	8000bfc <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e0d7      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c7e:	4b4b      	ldr	r3, [pc, #300]	@ (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0ee      	beq.n	8001c68 <HAL_RCC_OscConfig+0x368>
 8001c8a:	e014      	b.n	8001cb6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8c:	f7fe ffb6 	bl	8000bfc <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c92:	e00a      	b.n	8001caa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c94:	f7fe ffb2 	bl	8000bfc <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e0c1      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001caa:	4b40      	ldr	r3, [pc, #256]	@ (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1ee      	bne.n	8001c94 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cb6:	7dfb      	ldrb	r3, [r7, #23]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d105      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cbc:	4b3b      	ldr	r3, [pc, #236]	@ (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc0:	4a3a      	ldr	r2, [pc, #232]	@ (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001cc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cc6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 80ad 	beq.w	8001e2c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cd2:	4b36      	ldr	r3, [pc, #216]	@ (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
 8001cda:	2b08      	cmp	r3, #8
 8001cdc:	d060      	beq.n	8001da0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d145      	bne.n	8001d72 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce6:	4b33      	ldr	r3, [pc, #204]	@ (8001db4 <HAL_RCC_OscConfig+0x4b4>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cec:	f7fe ff86 	bl	8000bfc <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf4:	f7fe ff82 	bl	8000bfc <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e093      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d06:	4b29      	ldr	r3, [pc, #164]	@ (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69da      	ldr	r2, [r3, #28]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d20:	019b      	lsls	r3, r3, #6
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d28:	085b      	lsrs	r3, r3, #1
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	041b      	lsls	r3, r3, #16
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d34:	061b      	lsls	r3, r3, #24
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3c:	071b      	lsls	r3, r3, #28
 8001d3e:	491b      	ldr	r1, [pc, #108]	@ (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d44:	4b1b      	ldr	r3, [pc, #108]	@ (8001db4 <HAL_RCC_OscConfig+0x4b4>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4a:	f7fe ff57 	bl	8000bfc <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d50:	e008      	b.n	8001d64 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d52:	f7fe ff53 	bl	8000bfc <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e064      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d64:	4b11      	ldr	r3, [pc, #68]	@ (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0f0      	beq.n	8001d52 <HAL_RCC_OscConfig+0x452>
 8001d70:	e05c      	b.n	8001e2c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d72:	4b10      	ldr	r3, [pc, #64]	@ (8001db4 <HAL_RCC_OscConfig+0x4b4>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d78:	f7fe ff40 	bl	8000bfc <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d80:	f7fe ff3c 	bl	8000bfc <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e04d      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d92:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x480>
 8001d9e:	e045      	b.n	8001e2c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d107      	bne.n	8001db8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e040      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40007000 	.word	0x40007000
 8001db4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001db8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e38 <HAL_RCC_OscConfig+0x538>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d030      	beq.n	8001e28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d129      	bne.n	8001e28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d122      	bne.n	8001e28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001de8:	4013      	ands	r3, r2
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001dee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d119      	bne.n	8001e28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dfe:	085b      	lsrs	r3, r3, #1
 8001e00:	3b01      	subs	r3, #1
 8001e02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d10f      	bne.n	8001e28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d107      	bne.n	8001e28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d001      	beq.n	8001e2c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e000      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800

08001e3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e041      	b.n	8001ed2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d106      	bne.n	8001e68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f839 	bl	8001eda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3304      	adds	r3, #4
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	f000 f9c0 	bl	8002200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d001      	beq.n	8001f08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e04e      	b.n	8001fa6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0201 	orr.w	r2, r2, #1
 8001f1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a23      	ldr	r2, [pc, #140]	@ (8001fb4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d022      	beq.n	8001f70 <HAL_TIM_Base_Start_IT+0x80>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f32:	d01d      	beq.n	8001f70 <HAL_TIM_Base_Start_IT+0x80>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a1f      	ldr	r2, [pc, #124]	@ (8001fb8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d018      	beq.n	8001f70 <HAL_TIM_Base_Start_IT+0x80>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a1e      	ldr	r2, [pc, #120]	@ (8001fbc <HAL_TIM_Base_Start_IT+0xcc>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d013      	beq.n	8001f70 <HAL_TIM_Base_Start_IT+0x80>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a1c      	ldr	r2, [pc, #112]	@ (8001fc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d00e      	beq.n	8001f70 <HAL_TIM_Base_Start_IT+0x80>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a1b      	ldr	r2, [pc, #108]	@ (8001fc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d009      	beq.n	8001f70 <HAL_TIM_Base_Start_IT+0x80>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a19      	ldr	r2, [pc, #100]	@ (8001fc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d004      	beq.n	8001f70 <HAL_TIM_Base_Start_IT+0x80>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a18      	ldr	r2, [pc, #96]	@ (8001fcc <HAL_TIM_Base_Start_IT+0xdc>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d111      	bne.n	8001f94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b06      	cmp	r3, #6
 8001f80:	d010      	beq.n	8001fa4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f042 0201 	orr.w	r2, r2, #1
 8001f90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f92:	e007      	b.n	8001fa4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 0201 	orr.w	r2, r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40010000 	.word	0x40010000
 8001fb8:	40000400 	.word	0x40000400
 8001fbc:	40000800 	.word	0x40000800
 8001fc0:	40000c00 	.word	0x40000c00
 8001fc4:	40010400 	.word	0x40010400
 8001fc8:	40014000 	.word	0x40014000
 8001fcc:	40001800 	.word	0x40001800

08001fd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d020      	beq.n	8002034 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d01b      	beq.n	8002034 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f06f 0202 	mvn.w	r2, #2
 8002004:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f8d2 	bl	80021c4 <HAL_TIM_IC_CaptureCallback>
 8002020:	e005      	b.n	800202e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f8c4 	bl	80021b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f8d5 	bl	80021d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	2b00      	cmp	r3, #0
 800203c:	d020      	beq.n	8002080 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	d01b      	beq.n	8002080 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0204 	mvn.w	r2, #4
 8002050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2202      	movs	r2, #2
 8002056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f8ac 	bl	80021c4 <HAL_TIM_IC_CaptureCallback>
 800206c:	e005      	b.n	800207a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f89e 	bl	80021b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f8af 	bl	80021d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b00      	cmp	r3, #0
 8002088:	d020      	beq.n	80020cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f003 0308 	and.w	r3, r3, #8
 8002090:	2b00      	cmp	r3, #0
 8002092:	d01b      	beq.n	80020cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f06f 0208 	mvn.w	r2, #8
 800209c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2204      	movs	r2, #4
 80020a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f886 	bl	80021c4 <HAL_TIM_IC_CaptureCallback>
 80020b8:	e005      	b.n	80020c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f878 	bl	80021b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 f889 	bl	80021d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f003 0310 	and.w	r3, r3, #16
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d020      	beq.n	8002118 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f003 0310 	and.w	r3, r3, #16
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d01b      	beq.n	8002118 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f06f 0210 	mvn.w	r2, #16
 80020e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2208      	movs	r2, #8
 80020ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f860 	bl	80021c4 <HAL_TIM_IC_CaptureCallback>
 8002104:	e005      	b.n	8002112 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f852 	bl	80021b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f863 	bl	80021d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00c      	beq.n	800213c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	2b00      	cmp	r3, #0
 800212a:	d007      	beq.n	800213c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f06f 0201 	mvn.w	r2, #1
 8002134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7fe fbc0 	bl	80008bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00c      	beq.n	8002160 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800214c:	2b00      	cmp	r3, #0
 800214e:	d007      	beq.n	8002160 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f906 	bl	800236c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00c      	beq.n	8002184 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002170:	2b00      	cmp	r3, #0
 8002172:	d007      	beq.n	8002184 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800217c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f834 	bl	80021ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	f003 0320 	and.w	r3, r3, #32
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00c      	beq.n	80021a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f003 0320 	and.w	r3, r3, #32
 8002194:	2b00      	cmp	r3, #0
 8002196:	d007      	beq.n	80021a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f06f 0220 	mvn.w	r2, #32
 80021a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f8d8 	bl	8002358 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021a8:	bf00      	nop
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a46      	ldr	r2, [pc, #280]	@ (800232c <TIM_Base_SetConfig+0x12c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d013      	beq.n	8002240 <TIM_Base_SetConfig+0x40>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800221e:	d00f      	beq.n	8002240 <TIM_Base_SetConfig+0x40>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a43      	ldr	r2, [pc, #268]	@ (8002330 <TIM_Base_SetConfig+0x130>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d00b      	beq.n	8002240 <TIM_Base_SetConfig+0x40>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a42      	ldr	r2, [pc, #264]	@ (8002334 <TIM_Base_SetConfig+0x134>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d007      	beq.n	8002240 <TIM_Base_SetConfig+0x40>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a41      	ldr	r2, [pc, #260]	@ (8002338 <TIM_Base_SetConfig+0x138>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d003      	beq.n	8002240 <TIM_Base_SetConfig+0x40>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a40      	ldr	r2, [pc, #256]	@ (800233c <TIM_Base_SetConfig+0x13c>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d108      	bne.n	8002252 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	4313      	orrs	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a35      	ldr	r2, [pc, #212]	@ (800232c <TIM_Base_SetConfig+0x12c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d02b      	beq.n	80022b2 <TIM_Base_SetConfig+0xb2>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002260:	d027      	beq.n	80022b2 <TIM_Base_SetConfig+0xb2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a32      	ldr	r2, [pc, #200]	@ (8002330 <TIM_Base_SetConfig+0x130>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d023      	beq.n	80022b2 <TIM_Base_SetConfig+0xb2>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a31      	ldr	r2, [pc, #196]	@ (8002334 <TIM_Base_SetConfig+0x134>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d01f      	beq.n	80022b2 <TIM_Base_SetConfig+0xb2>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a30      	ldr	r2, [pc, #192]	@ (8002338 <TIM_Base_SetConfig+0x138>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d01b      	beq.n	80022b2 <TIM_Base_SetConfig+0xb2>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a2f      	ldr	r2, [pc, #188]	@ (800233c <TIM_Base_SetConfig+0x13c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d017      	beq.n	80022b2 <TIM_Base_SetConfig+0xb2>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a2e      	ldr	r2, [pc, #184]	@ (8002340 <TIM_Base_SetConfig+0x140>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d013      	beq.n	80022b2 <TIM_Base_SetConfig+0xb2>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a2d      	ldr	r2, [pc, #180]	@ (8002344 <TIM_Base_SetConfig+0x144>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d00f      	beq.n	80022b2 <TIM_Base_SetConfig+0xb2>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a2c      	ldr	r2, [pc, #176]	@ (8002348 <TIM_Base_SetConfig+0x148>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d00b      	beq.n	80022b2 <TIM_Base_SetConfig+0xb2>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a2b      	ldr	r2, [pc, #172]	@ (800234c <TIM_Base_SetConfig+0x14c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d007      	beq.n	80022b2 <TIM_Base_SetConfig+0xb2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a2a      	ldr	r2, [pc, #168]	@ (8002350 <TIM_Base_SetConfig+0x150>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d003      	beq.n	80022b2 <TIM_Base_SetConfig+0xb2>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a29      	ldr	r2, [pc, #164]	@ (8002354 <TIM_Base_SetConfig+0x154>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d108      	bne.n	80022c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a10      	ldr	r2, [pc, #64]	@ (800232c <TIM_Base_SetConfig+0x12c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d003      	beq.n	80022f8 <TIM_Base_SetConfig+0xf8>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a12      	ldr	r2, [pc, #72]	@ (800233c <TIM_Base_SetConfig+0x13c>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d103      	bne.n	8002300 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b01      	cmp	r3, #1
 8002310:	d105      	bne.n	800231e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	f023 0201 	bic.w	r2, r3, #1
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	611a      	str	r2, [r3, #16]
  }
}
 800231e:	bf00      	nop
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40010000 	.word	0x40010000
 8002330:	40000400 	.word	0x40000400
 8002334:	40000800 	.word	0x40000800
 8002338:	40000c00 	.word	0x40000c00
 800233c:	40010400 	.word	0x40010400
 8002340:	40014000 	.word	0x40014000
 8002344:	40014400 	.word	0x40014400
 8002348:	40014800 	.word	0x40014800
 800234c:	40001800 	.word	0x40001800
 8002350:	40001c00 	.word	0x40001c00
 8002354:	40002000 	.word	0x40002000

08002358 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e042      	b.n	8002418 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d106      	bne.n	80023ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7fe facc 	bl	8000944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2224      	movs	r2, #36	@ 0x24
 80023b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f973 	bl	80026b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	691a      	ldr	r2, [r3, #16]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80023d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	695a      	ldr	r2, [r3, #20]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2220      	movs	r2, #32
 8002404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2220      	movs	r2, #32
 800240c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08a      	sub	sp, #40	@ 0x28
 8002424:	af02      	add	r7, sp, #8
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	603b      	str	r3, [r7, #0]
 800242c:	4613      	mov	r3, r2
 800242e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b20      	cmp	r3, #32
 800243e:	d175      	bne.n	800252c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <HAL_UART_Transmit+0x2c>
 8002446:	88fb      	ldrh	r3, [r7, #6]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e06e      	b.n	800252e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2221      	movs	r2, #33	@ 0x21
 800245a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800245e:	f7fe fbcd 	bl	8000bfc <HAL_GetTick>
 8002462:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	88fa      	ldrh	r2, [r7, #6]
 8002468:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	88fa      	ldrh	r2, [r7, #6]
 800246e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002478:	d108      	bne.n	800248c <HAL_UART_Transmit+0x6c>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d104      	bne.n	800248c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	61bb      	str	r3, [r7, #24]
 800248a:	e003      	b.n	8002494 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002490:	2300      	movs	r3, #0
 8002492:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002494:	e02e      	b.n	80024f4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2200      	movs	r2, #0
 800249e:	2180      	movs	r1, #128	@ 0x80
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 f848 	bl	8002536 <UART_WaitOnFlagUntilTimeout>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2220      	movs	r2, #32
 80024b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e03a      	b.n	800252e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10b      	bne.n	80024d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	3302      	adds	r3, #2
 80024d2:	61bb      	str	r3, [r7, #24]
 80024d4:	e007      	b.n	80024e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	781a      	ldrb	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	3301      	adds	r3, #1
 80024e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1cb      	bne.n	8002496 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2200      	movs	r2, #0
 8002506:	2140      	movs	r1, #64	@ 0x40
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 f814 	bl	8002536 <UART_WaitOnFlagUntilTimeout>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2220      	movs	r2, #32
 8002518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e006      	b.n	800252e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2220      	movs	r2, #32
 8002524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	e000      	b.n	800252e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800252c:	2302      	movs	r3, #2
  }
}
 800252e:	4618      	mov	r0, r3
 8002530:	3720      	adds	r7, #32
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b086      	sub	sp, #24
 800253a:	af00      	add	r7, sp, #0
 800253c:	60f8      	str	r0, [r7, #12]
 800253e:	60b9      	str	r1, [r7, #8]
 8002540:	603b      	str	r3, [r7, #0]
 8002542:	4613      	mov	r3, r2
 8002544:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002546:	e03b      	b.n	80025c0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254e:	d037      	beq.n	80025c0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002550:	f7fe fb54 	bl	8000bfc <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	6a3a      	ldr	r2, [r7, #32]
 800255c:	429a      	cmp	r2, r3
 800255e:	d302      	bcc.n	8002566 <UART_WaitOnFlagUntilTimeout+0x30>
 8002560:	6a3b      	ldr	r3, [r7, #32]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e03a      	b.n	80025e0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d023      	beq.n	80025c0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2b80      	cmp	r3, #128	@ 0x80
 800257c:	d020      	beq.n	80025c0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2b40      	cmp	r3, #64	@ 0x40
 8002582:	d01d      	beq.n	80025c0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b08      	cmp	r3, #8
 8002590:	d116      	bne.n	80025c0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 f81d 	bl	80025e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2208      	movs	r2, #8
 80025b2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e00f      	b.n	80025e0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	4013      	ands	r3, r2
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	bf0c      	ite	eq
 80025d0:	2301      	moveq	r3, #1
 80025d2:	2300      	movne	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	461a      	mov	r2, r3
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d0b4      	beq.n	8002548 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b095      	sub	sp, #84	@ 0x54
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	330c      	adds	r3, #12
 80025f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025fa:	e853 3f00 	ldrex	r3, [r3]
 80025fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002602:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002606:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	330c      	adds	r3, #12
 800260e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002610:	643a      	str	r2, [r7, #64]	@ 0x40
 8002612:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002614:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002616:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002618:	e841 2300 	strex	r3, r2, [r1]
 800261c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800261e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1e5      	bne.n	80025f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	3314      	adds	r3, #20
 800262a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	e853 3f00 	ldrex	r3, [r3]
 8002632:	61fb      	str	r3, [r7, #28]
   return(result);
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f023 0301 	bic.w	r3, r3, #1
 800263a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	3314      	adds	r3, #20
 8002642:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002644:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002646:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002648:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800264a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800264c:	e841 2300 	strex	r3, r2, [r1]
 8002650:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1e5      	bne.n	8002624 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265c:	2b01      	cmp	r3, #1
 800265e:	d119      	bne.n	8002694 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	330c      	adds	r3, #12
 8002666:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	e853 3f00 	ldrex	r3, [r3]
 800266e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	f023 0310 	bic.w	r3, r3, #16
 8002676:	647b      	str	r3, [r7, #68]	@ 0x44
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	330c      	adds	r3, #12
 800267e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002680:	61ba      	str	r2, [r7, #24]
 8002682:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002684:	6979      	ldr	r1, [r7, #20]
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	e841 2300 	strex	r3, r2, [r1]
 800268c:	613b      	str	r3, [r7, #16]
   return(result);
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1e5      	bne.n	8002660 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2220      	movs	r2, #32
 8002698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80026a2:	bf00      	nop
 80026a4:	3754      	adds	r7, #84	@ 0x54
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026b4:	b0c0      	sub	sp, #256	@ 0x100
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80026c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026cc:	68d9      	ldr	r1, [r3, #12]
 80026ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	ea40 0301 	orr.w	r3, r0, r1
 80026d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	431a      	orrs	r2, r3
 80026e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80026fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002708:	f021 010c 	bic.w	r1, r1, #12
 800270c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002716:	430b      	orrs	r3, r1
 8002718:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800271a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800272a:	6999      	ldr	r1, [r3, #24]
 800272c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	ea40 0301 	orr.w	r3, r0, r1
 8002736:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	4b8f      	ldr	r3, [pc, #572]	@ (800297c <UART_SetConfig+0x2cc>)
 8002740:	429a      	cmp	r2, r3
 8002742:	d005      	beq.n	8002750 <UART_SetConfig+0xa0>
 8002744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	4b8d      	ldr	r3, [pc, #564]	@ (8002980 <UART_SetConfig+0x2d0>)
 800274c:	429a      	cmp	r2, r3
 800274e:	d104      	bne.n	800275a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002750:	f7fe fe60 	bl	8001414 <HAL_RCC_GetPCLK2Freq>
 8002754:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002758:	e003      	b.n	8002762 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800275a:	f7fe fe47 	bl	80013ec <HAL_RCC_GetPCLK1Freq>
 800275e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800276c:	f040 810c 	bne.w	8002988 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002770:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002774:	2200      	movs	r2, #0
 8002776:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800277a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800277e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002782:	4622      	mov	r2, r4
 8002784:	462b      	mov	r3, r5
 8002786:	1891      	adds	r1, r2, r2
 8002788:	65b9      	str	r1, [r7, #88]	@ 0x58
 800278a:	415b      	adcs	r3, r3
 800278c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800278e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002792:	4621      	mov	r1, r4
 8002794:	eb12 0801 	adds.w	r8, r2, r1
 8002798:	4629      	mov	r1, r5
 800279a:	eb43 0901 	adc.w	r9, r3, r1
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	f04f 0300 	mov.w	r3, #0
 80027a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027b2:	4690      	mov	r8, r2
 80027b4:	4699      	mov	r9, r3
 80027b6:	4623      	mov	r3, r4
 80027b8:	eb18 0303 	adds.w	r3, r8, r3
 80027bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80027c0:	462b      	mov	r3, r5
 80027c2:	eb49 0303 	adc.w	r3, r9, r3
 80027c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80027ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80027d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80027da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80027de:	460b      	mov	r3, r1
 80027e0:	18db      	adds	r3, r3, r3
 80027e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80027e4:	4613      	mov	r3, r2
 80027e6:	eb42 0303 	adc.w	r3, r2, r3
 80027ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80027ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80027f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80027f4:	f7fd fd0c 	bl	8000210 <__aeabi_uldivmod>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4b61      	ldr	r3, [pc, #388]	@ (8002984 <UART_SetConfig+0x2d4>)
 80027fe:	fba3 2302 	umull	r2, r3, r3, r2
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	011c      	lsls	r4, r3, #4
 8002806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800280a:	2200      	movs	r2, #0
 800280c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002810:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002814:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002818:	4642      	mov	r2, r8
 800281a:	464b      	mov	r3, r9
 800281c:	1891      	adds	r1, r2, r2
 800281e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002820:	415b      	adcs	r3, r3
 8002822:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002824:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002828:	4641      	mov	r1, r8
 800282a:	eb12 0a01 	adds.w	sl, r2, r1
 800282e:	4649      	mov	r1, r9
 8002830:	eb43 0b01 	adc.w	fp, r3, r1
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002840:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002844:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002848:	4692      	mov	sl, r2
 800284a:	469b      	mov	fp, r3
 800284c:	4643      	mov	r3, r8
 800284e:	eb1a 0303 	adds.w	r3, sl, r3
 8002852:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002856:	464b      	mov	r3, r9
 8002858:	eb4b 0303 	adc.w	r3, fp, r3
 800285c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800286c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002870:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002874:	460b      	mov	r3, r1
 8002876:	18db      	adds	r3, r3, r3
 8002878:	643b      	str	r3, [r7, #64]	@ 0x40
 800287a:	4613      	mov	r3, r2
 800287c:	eb42 0303 	adc.w	r3, r2, r3
 8002880:	647b      	str	r3, [r7, #68]	@ 0x44
 8002882:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002886:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800288a:	f7fd fcc1 	bl	8000210 <__aeabi_uldivmod>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	4611      	mov	r1, r2
 8002894:	4b3b      	ldr	r3, [pc, #236]	@ (8002984 <UART_SetConfig+0x2d4>)
 8002896:	fba3 2301 	umull	r2, r3, r3, r1
 800289a:	095b      	lsrs	r3, r3, #5
 800289c:	2264      	movs	r2, #100	@ 0x64
 800289e:	fb02 f303 	mul.w	r3, r2, r3
 80028a2:	1acb      	subs	r3, r1, r3
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80028aa:	4b36      	ldr	r3, [pc, #216]	@ (8002984 <UART_SetConfig+0x2d4>)
 80028ac:	fba3 2302 	umull	r2, r3, r3, r2
 80028b0:	095b      	lsrs	r3, r3, #5
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80028b8:	441c      	add	r4, r3
 80028ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028be:	2200      	movs	r2, #0
 80028c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80028c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80028cc:	4642      	mov	r2, r8
 80028ce:	464b      	mov	r3, r9
 80028d0:	1891      	adds	r1, r2, r2
 80028d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80028d4:	415b      	adcs	r3, r3
 80028d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80028dc:	4641      	mov	r1, r8
 80028de:	1851      	adds	r1, r2, r1
 80028e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80028e2:	4649      	mov	r1, r9
 80028e4:	414b      	adcs	r3, r1
 80028e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80028f4:	4659      	mov	r1, fp
 80028f6:	00cb      	lsls	r3, r1, #3
 80028f8:	4651      	mov	r1, sl
 80028fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028fe:	4651      	mov	r1, sl
 8002900:	00ca      	lsls	r2, r1, #3
 8002902:	4610      	mov	r0, r2
 8002904:	4619      	mov	r1, r3
 8002906:	4603      	mov	r3, r0
 8002908:	4642      	mov	r2, r8
 800290a:	189b      	adds	r3, r3, r2
 800290c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002910:	464b      	mov	r3, r9
 8002912:	460a      	mov	r2, r1
 8002914:	eb42 0303 	adc.w	r3, r2, r3
 8002918:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800291c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002928:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800292c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002930:	460b      	mov	r3, r1
 8002932:	18db      	adds	r3, r3, r3
 8002934:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002936:	4613      	mov	r3, r2
 8002938:	eb42 0303 	adc.w	r3, r2, r3
 800293c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800293e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002942:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002946:	f7fd fc63 	bl	8000210 <__aeabi_uldivmod>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4b0d      	ldr	r3, [pc, #52]	@ (8002984 <UART_SetConfig+0x2d4>)
 8002950:	fba3 1302 	umull	r1, r3, r3, r2
 8002954:	095b      	lsrs	r3, r3, #5
 8002956:	2164      	movs	r1, #100	@ 0x64
 8002958:	fb01 f303 	mul.w	r3, r1, r3
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	3332      	adds	r3, #50	@ 0x32
 8002962:	4a08      	ldr	r2, [pc, #32]	@ (8002984 <UART_SetConfig+0x2d4>)
 8002964:	fba2 2303 	umull	r2, r3, r2, r3
 8002968:	095b      	lsrs	r3, r3, #5
 800296a:	f003 0207 	and.w	r2, r3, #7
 800296e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4422      	add	r2, r4
 8002976:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002978:	e106      	b.n	8002b88 <UART_SetConfig+0x4d8>
 800297a:	bf00      	nop
 800297c:	40011000 	.word	0x40011000
 8002980:	40011400 	.word	0x40011400
 8002984:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002988:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800298c:	2200      	movs	r2, #0
 800298e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002992:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002996:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800299a:	4642      	mov	r2, r8
 800299c:	464b      	mov	r3, r9
 800299e:	1891      	adds	r1, r2, r2
 80029a0:	6239      	str	r1, [r7, #32]
 80029a2:	415b      	adcs	r3, r3
 80029a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80029a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029aa:	4641      	mov	r1, r8
 80029ac:	1854      	adds	r4, r2, r1
 80029ae:	4649      	mov	r1, r9
 80029b0:	eb43 0501 	adc.w	r5, r3, r1
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	f04f 0300 	mov.w	r3, #0
 80029bc:	00eb      	lsls	r3, r5, #3
 80029be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029c2:	00e2      	lsls	r2, r4, #3
 80029c4:	4614      	mov	r4, r2
 80029c6:	461d      	mov	r5, r3
 80029c8:	4643      	mov	r3, r8
 80029ca:	18e3      	adds	r3, r4, r3
 80029cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80029d0:	464b      	mov	r3, r9
 80029d2:	eb45 0303 	adc.w	r3, r5, r3
 80029d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80029da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80029e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80029f6:	4629      	mov	r1, r5
 80029f8:	008b      	lsls	r3, r1, #2
 80029fa:	4621      	mov	r1, r4
 80029fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a00:	4621      	mov	r1, r4
 8002a02:	008a      	lsls	r2, r1, #2
 8002a04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002a08:	f7fd fc02 	bl	8000210 <__aeabi_uldivmod>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4b60      	ldr	r3, [pc, #384]	@ (8002b94 <UART_SetConfig+0x4e4>)
 8002a12:	fba3 2302 	umull	r2, r3, r3, r2
 8002a16:	095b      	lsrs	r3, r3, #5
 8002a18:	011c      	lsls	r4, r3, #4
 8002a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a24:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002a2c:	4642      	mov	r2, r8
 8002a2e:	464b      	mov	r3, r9
 8002a30:	1891      	adds	r1, r2, r2
 8002a32:	61b9      	str	r1, [r7, #24]
 8002a34:	415b      	adcs	r3, r3
 8002a36:	61fb      	str	r3, [r7, #28]
 8002a38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a3c:	4641      	mov	r1, r8
 8002a3e:	1851      	adds	r1, r2, r1
 8002a40:	6139      	str	r1, [r7, #16]
 8002a42:	4649      	mov	r1, r9
 8002a44:	414b      	adcs	r3, r1
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	f04f 0200 	mov.w	r2, #0
 8002a4c:	f04f 0300 	mov.w	r3, #0
 8002a50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a54:	4659      	mov	r1, fp
 8002a56:	00cb      	lsls	r3, r1, #3
 8002a58:	4651      	mov	r1, sl
 8002a5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a5e:	4651      	mov	r1, sl
 8002a60:	00ca      	lsls	r2, r1, #3
 8002a62:	4610      	mov	r0, r2
 8002a64:	4619      	mov	r1, r3
 8002a66:	4603      	mov	r3, r0
 8002a68:	4642      	mov	r2, r8
 8002a6a:	189b      	adds	r3, r3, r2
 8002a6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a70:	464b      	mov	r3, r9
 8002a72:	460a      	mov	r2, r1
 8002a74:	eb42 0303 	adc.w	r3, r2, r3
 8002a78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a86:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	f04f 0300 	mov.w	r3, #0
 8002a90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002a94:	4649      	mov	r1, r9
 8002a96:	008b      	lsls	r3, r1, #2
 8002a98:	4641      	mov	r1, r8
 8002a9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a9e:	4641      	mov	r1, r8
 8002aa0:	008a      	lsls	r2, r1, #2
 8002aa2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002aa6:	f7fd fbb3 	bl	8000210 <__aeabi_uldivmod>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	4611      	mov	r1, r2
 8002ab0:	4b38      	ldr	r3, [pc, #224]	@ (8002b94 <UART_SetConfig+0x4e4>)
 8002ab2:	fba3 2301 	umull	r2, r3, r3, r1
 8002ab6:	095b      	lsrs	r3, r3, #5
 8002ab8:	2264      	movs	r2, #100	@ 0x64
 8002aba:	fb02 f303 	mul.w	r3, r2, r3
 8002abe:	1acb      	subs	r3, r1, r3
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	3332      	adds	r3, #50	@ 0x32
 8002ac4:	4a33      	ldr	r2, [pc, #204]	@ (8002b94 <UART_SetConfig+0x4e4>)
 8002ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ad0:	441c      	add	r4, r3
 8002ad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ada:	677a      	str	r2, [r7, #116]	@ 0x74
 8002adc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002ae0:	4642      	mov	r2, r8
 8002ae2:	464b      	mov	r3, r9
 8002ae4:	1891      	adds	r1, r2, r2
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	415b      	adcs	r3, r3
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002af0:	4641      	mov	r1, r8
 8002af2:	1851      	adds	r1, r2, r1
 8002af4:	6039      	str	r1, [r7, #0]
 8002af6:	4649      	mov	r1, r9
 8002af8:	414b      	adcs	r3, r1
 8002afa:	607b      	str	r3, [r7, #4]
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b08:	4659      	mov	r1, fp
 8002b0a:	00cb      	lsls	r3, r1, #3
 8002b0c:	4651      	mov	r1, sl
 8002b0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b12:	4651      	mov	r1, sl
 8002b14:	00ca      	lsls	r2, r1, #3
 8002b16:	4610      	mov	r0, r2
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	4642      	mov	r2, r8
 8002b1e:	189b      	adds	r3, r3, r2
 8002b20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b22:	464b      	mov	r3, r9
 8002b24:	460a      	mov	r2, r1
 8002b26:	eb42 0303 	adc.w	r3, r2, r3
 8002b2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b36:	667a      	str	r2, [r7, #100]	@ 0x64
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002b44:	4649      	mov	r1, r9
 8002b46:	008b      	lsls	r3, r1, #2
 8002b48:	4641      	mov	r1, r8
 8002b4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b4e:	4641      	mov	r1, r8
 8002b50:	008a      	lsls	r2, r1, #2
 8002b52:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002b56:	f7fd fb5b 	bl	8000210 <__aeabi_uldivmod>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b94 <UART_SetConfig+0x4e4>)
 8002b60:	fba3 1302 	umull	r1, r3, r3, r2
 8002b64:	095b      	lsrs	r3, r3, #5
 8002b66:	2164      	movs	r1, #100	@ 0x64
 8002b68:	fb01 f303 	mul.w	r3, r1, r3
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	3332      	adds	r3, #50	@ 0x32
 8002b72:	4a08      	ldr	r2, [pc, #32]	@ (8002b94 <UART_SetConfig+0x4e4>)
 8002b74:	fba2 2303 	umull	r2, r3, r2, r3
 8002b78:	095b      	lsrs	r3, r3, #5
 8002b7a:	f003 020f 	and.w	r2, r3, #15
 8002b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4422      	add	r2, r4
 8002b86:	609a      	str	r2, [r3, #8]
}
 8002b88:	bf00      	nop
 8002b8a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b94:	51eb851f 	.word	0x51eb851f

08002b98 <__NVIC_SetPriority>:
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	6039      	str	r1, [r7, #0]
 8002ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	db0a      	blt.n	8002bc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	490c      	ldr	r1, [pc, #48]	@ (8002be4 <__NVIC_SetPriority+0x4c>)
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	0112      	lsls	r2, r2, #4
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	440b      	add	r3, r1
 8002bbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002bc0:	e00a      	b.n	8002bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	4908      	ldr	r1, [pc, #32]	@ (8002be8 <__NVIC_SetPriority+0x50>)
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	3b04      	subs	r3, #4
 8002bd0:	0112      	lsls	r2, r2, #4
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	761a      	strb	r2, [r3, #24]
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	e000e100 	.word	0xe000e100
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002bf0:	4b05      	ldr	r3, [pc, #20]	@ (8002c08 <SysTick_Handler+0x1c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002bf4:	f001 fd46 	bl	8004684 <xTaskGetSchedulerState>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d001      	beq.n	8002c02 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002bfe:	f002 fb3b 	bl	8005278 <xPortSysTickHandler>
  }
}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	e000e010 	.word	0xe000e010

08002c0c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002c10:	2100      	movs	r1, #0
 8002c12:	f06f 0004 	mvn.w	r0, #4
 8002c16:	f7ff ffbf 	bl	8002b98 <__NVIC_SetPriority>
#endif
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c26:	f3ef 8305 	mrs	r3, IPSR
 8002c2a:	603b      	str	r3, [r7, #0]
  return(result);
 8002c2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002c32:	f06f 0305 	mvn.w	r3, #5
 8002c36:	607b      	str	r3, [r7, #4]
 8002c38:	e00c      	b.n	8002c54 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c64 <osKernelInitialize+0x44>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d105      	bne.n	8002c4e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002c42:	4b08      	ldr	r3, [pc, #32]	@ (8002c64 <osKernelInitialize+0x44>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	607b      	str	r3, [r7, #4]
 8002c4c:	e002      	b.n	8002c54 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002c54:	687b      	ldr	r3, [r7, #4]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	20000148 	.word	0x20000148

08002c68 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c6e:	f3ef 8305 	mrs	r3, IPSR
 8002c72:	603b      	str	r3, [r7, #0]
  return(result);
 8002c74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002c7a:	f06f 0305 	mvn.w	r3, #5
 8002c7e:	607b      	str	r3, [r7, #4]
 8002c80:	e010      	b.n	8002ca4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002c82:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb0 <osKernelStart+0x48>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d109      	bne.n	8002c9e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002c8a:	f7ff ffbf 	bl	8002c0c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002c8e:	4b08      	ldr	r3, [pc, #32]	@ (8002cb0 <osKernelStart+0x48>)
 8002c90:	2202      	movs	r2, #2
 8002c92:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002c94:	f001 f892 	bl	8003dbc <vTaskStartScheduler>
      stat = osOK;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	607b      	str	r3, [r7, #4]
 8002c9c:	e002      	b.n	8002ca4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002ca4:	687b      	ldr	r3, [r7, #4]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000148 	.word	0x20000148

08002cb4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b08e      	sub	sp, #56	@ 0x38
 8002cb8:	af04      	add	r7, sp, #16
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002cc4:	f3ef 8305 	mrs	r3, IPSR
 8002cc8:	617b      	str	r3, [r7, #20]
  return(result);
 8002cca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d17e      	bne.n	8002dce <osThreadNew+0x11a>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d07b      	beq.n	8002dce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002cd6:	2380      	movs	r3, #128	@ 0x80
 8002cd8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002cda:	2318      	movs	r3, #24
 8002cdc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d045      	beq.n	8002d7a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <osThreadNew+0x48>
        name = attr->name;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <osThreadNew+0x6e>
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	2b38      	cmp	r3, #56	@ 0x38
 8002d14:	d805      	bhi.n	8002d22 <osThreadNew+0x6e>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <osThreadNew+0x72>
        return (NULL);
 8002d22:	2300      	movs	r3, #0
 8002d24:	e054      	b.n	8002dd0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	089b      	lsrs	r3, r3, #2
 8002d34:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00e      	beq.n	8002d5c <osThreadNew+0xa8>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	2ba7      	cmp	r3, #167	@ 0xa7
 8002d44:	d90a      	bls.n	8002d5c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d006      	beq.n	8002d5c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <osThreadNew+0xa8>
        mem = 1;
 8002d56:	2301      	movs	r3, #1
 8002d58:	61bb      	str	r3, [r7, #24]
 8002d5a:	e010      	b.n	8002d7e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10c      	bne.n	8002d7e <osThreadNew+0xca>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d108      	bne.n	8002d7e <osThreadNew+0xca>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d104      	bne.n	8002d7e <osThreadNew+0xca>
          mem = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	61bb      	str	r3, [r7, #24]
 8002d78:	e001      	b.n	8002d7e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d110      	bne.n	8002da6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d8c:	9202      	str	r2, [sp, #8]
 8002d8e:	9301      	str	r3, [sp, #4]
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	6a3a      	ldr	r2, [r7, #32]
 8002d98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 fe1a 	bl	80039d4 <xTaskCreateStatic>
 8002da0:	4603      	mov	r3, r0
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	e013      	b.n	8002dce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d110      	bne.n	8002dce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	f107 0310 	add.w	r3, r7, #16
 8002db4:	9301      	str	r3, [sp, #4]
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 fe68 	bl	8003a94 <xTaskCreate>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d001      	beq.n	8002dce <osThreadNew+0x11a>
            hTask = NULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002dce:	693b      	ldr	r3, [r7, #16]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3728      	adds	r7, #40	@ 0x28
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002de0:	f3ef 8305 	mrs	r3, IPSR
 8002de4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002de6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <osDelay+0x1c>
    stat = osErrorISR;
 8002dec:	f06f 0305 	mvn.w	r3, #5
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	e007      	b.n	8002e04 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 ffa6 	bl	8003d50 <vTaskDelay>
    }
  }

  return (stat);
 8002e04:	68fb      	ldr	r3, [r7, #12]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4a07      	ldr	r2, [pc, #28]	@ (8002e3c <vApplicationGetIdleTaskMemory+0x2c>)
 8002e20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	4a06      	ldr	r2, [pc, #24]	@ (8002e40 <vApplicationGetIdleTaskMemory+0x30>)
 8002e26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2280      	movs	r2, #128	@ 0x80
 8002e2c:	601a      	str	r2, [r3, #0]
}
 8002e2e:	bf00      	nop
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	2000014c 	.word	0x2000014c
 8002e40:	200001f4 	.word	0x200001f4

08002e44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4a07      	ldr	r2, [pc, #28]	@ (8002e70 <vApplicationGetTimerTaskMemory+0x2c>)
 8002e54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	4a06      	ldr	r2, [pc, #24]	@ (8002e74 <vApplicationGetTimerTaskMemory+0x30>)
 8002e5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e62:	601a      	str	r2, [r3, #0]
}
 8002e64:	bf00      	nop
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	200003f4 	.word	0x200003f4
 8002e74:	2000049c 	.word	0x2000049c

08002e78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f103 0208 	add.w	r2, r3, #8
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f103 0208 	add.w	r2, r3, #8
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f103 0208 	add.w	r2, r3, #8
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b085      	sub	sp, #20
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
 8002eda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	1c5a      	adds	r2, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	601a      	str	r2, [r3, #0]
}
 8002f0e:	bf00      	nop
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b085      	sub	sp, #20
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f30:	d103      	bne.n	8002f3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	e00c      	b.n	8002f54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	3308      	adds	r3, #8
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	e002      	b.n	8002f48 <vListInsert+0x2e>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d2f6      	bcs.n	8002f42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	1c5a      	adds	r2, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	601a      	str	r2, [r3, #0]
}
 8002f80:	bf00      	nop
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6892      	ldr	r2, [r2, #8]
 8002fa2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6852      	ldr	r2, [r2, #4]
 8002fac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d103      	bne.n	8002fc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	1e5a      	subs	r2, r3, #1
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10b      	bne.n	800300c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ff8:	f383 8811 	msr	BASEPRI, r3
 8002ffc:	f3bf 8f6f 	isb	sy
 8003000:	f3bf 8f4f 	dsb	sy
 8003004:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003006:	bf00      	nop
 8003008:	bf00      	nop
 800300a:	e7fd      	b.n	8003008 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800300c:	f002 f8a4 	bl	8005158 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003018:	68f9      	ldr	r1, [r7, #12]
 800301a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800301c:	fb01 f303 	mul.w	r3, r1, r3
 8003020:	441a      	add	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800303c:	3b01      	subs	r3, #1
 800303e:	68f9      	ldr	r1, [r7, #12]
 8003040:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003042:	fb01 f303 	mul.w	r3, r1, r3
 8003046:	441a      	add	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	22ff      	movs	r2, #255	@ 0xff
 8003050:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	22ff      	movs	r2, #255	@ 0xff
 8003058:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d114      	bne.n	800308c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d01a      	beq.n	80030a0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	3310      	adds	r3, #16
 800306e:	4618      	mov	r0, r3
 8003070:	f001 f942 	bl	80042f8 <xTaskRemoveFromEventList>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d012      	beq.n	80030a0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800307a:	4b0d      	ldr	r3, [pc, #52]	@ (80030b0 <xQueueGenericReset+0xd0>)
 800307c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	f3bf 8f4f 	dsb	sy
 8003086:	f3bf 8f6f 	isb	sy
 800308a:	e009      	b.n	80030a0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	3310      	adds	r3, #16
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff fef1 	bl	8002e78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	3324      	adds	r3, #36	@ 0x24
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff feec 	bl	8002e78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80030a0:	f002 f88c 	bl	80051bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80030a4:	2301      	movs	r3, #1
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	e000ed04 	.word	0xe000ed04

080030b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08e      	sub	sp, #56	@ 0x38
 80030b8:	af02      	add	r7, sp, #8
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
 80030c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10b      	bne.n	80030e0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80030c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030cc:	f383 8811 	msr	BASEPRI, r3
 80030d0:	f3bf 8f6f 	isb	sy
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80030da:	bf00      	nop
 80030dc:	bf00      	nop
 80030de:	e7fd      	b.n	80030dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10b      	bne.n	80030fe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80030e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ea:	f383 8811 	msr	BASEPRI, r3
 80030ee:	f3bf 8f6f 	isb	sy
 80030f2:	f3bf 8f4f 	dsb	sy
 80030f6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80030f8:	bf00      	nop
 80030fa:	bf00      	nop
 80030fc:	e7fd      	b.n	80030fa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <xQueueGenericCreateStatic+0x56>
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <xQueueGenericCreateStatic+0x5a>
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <xQueueGenericCreateStatic+0x5c>
 800310e:	2300      	movs	r3, #0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10b      	bne.n	800312c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003118:	f383 8811 	msr	BASEPRI, r3
 800311c:	f3bf 8f6f 	isb	sy
 8003120:	f3bf 8f4f 	dsb	sy
 8003124:	623b      	str	r3, [r7, #32]
}
 8003126:	bf00      	nop
 8003128:	bf00      	nop
 800312a:	e7fd      	b.n	8003128 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d102      	bne.n	8003138 <xQueueGenericCreateStatic+0x84>
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <xQueueGenericCreateStatic+0x88>
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <xQueueGenericCreateStatic+0x8a>
 800313c:	2300      	movs	r3, #0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10b      	bne.n	800315a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003146:	f383 8811 	msr	BASEPRI, r3
 800314a:	f3bf 8f6f 	isb	sy
 800314e:	f3bf 8f4f 	dsb	sy
 8003152:	61fb      	str	r3, [r7, #28]
}
 8003154:	bf00      	nop
 8003156:	bf00      	nop
 8003158:	e7fd      	b.n	8003156 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800315a:	2350      	movs	r3, #80	@ 0x50
 800315c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	2b50      	cmp	r3, #80	@ 0x50
 8003162:	d00b      	beq.n	800317c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003168:	f383 8811 	msr	BASEPRI, r3
 800316c:	f3bf 8f6f 	isb	sy
 8003170:	f3bf 8f4f 	dsb	sy
 8003174:	61bb      	str	r3, [r7, #24]
}
 8003176:	bf00      	nop
 8003178:	bf00      	nop
 800317a:	e7fd      	b.n	8003178 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800317c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00d      	beq.n	80031a4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003190:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	4613      	mov	r3, r2
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	68b9      	ldr	r1, [r7, #8]
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 f805 	bl	80031ae <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80031a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3730      	adds	r7, #48	@ 0x30
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b084      	sub	sp, #16
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	607a      	str	r2, [r7, #4]
 80031ba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d103      	bne.n	80031ca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	e002      	b.n	80031d0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80031dc:	2101      	movs	r1, #1
 80031de:	69b8      	ldr	r0, [r7, #24]
 80031e0:	f7ff fefe 	bl	8002fe0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	78fa      	ldrb	r2, [r7, #3]
 80031e8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80031ec:	bf00      	nop
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08e      	sub	sp, #56	@ 0x38
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003202:	2300      	movs	r3, #0
 8003204:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800320a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10b      	bne.n	8003228 <xQueueGenericSend+0x34>
	__asm volatile
 8003210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003214:	f383 8811 	msr	BASEPRI, r3
 8003218:	f3bf 8f6f 	isb	sy
 800321c:	f3bf 8f4f 	dsb	sy
 8003220:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003222:	bf00      	nop
 8003224:	bf00      	nop
 8003226:	e7fd      	b.n	8003224 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d103      	bne.n	8003236 <xQueueGenericSend+0x42>
 800322e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <xQueueGenericSend+0x46>
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <xQueueGenericSend+0x48>
 800323a:	2300      	movs	r3, #0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10b      	bne.n	8003258 <xQueueGenericSend+0x64>
	__asm volatile
 8003240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003244:	f383 8811 	msr	BASEPRI, r3
 8003248:	f3bf 8f6f 	isb	sy
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003252:	bf00      	nop
 8003254:	bf00      	nop
 8003256:	e7fd      	b.n	8003254 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d103      	bne.n	8003266 <xQueueGenericSend+0x72>
 800325e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <xQueueGenericSend+0x76>
 8003266:	2301      	movs	r3, #1
 8003268:	e000      	b.n	800326c <xQueueGenericSend+0x78>
 800326a:	2300      	movs	r3, #0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10b      	bne.n	8003288 <xQueueGenericSend+0x94>
	__asm volatile
 8003270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003274:	f383 8811 	msr	BASEPRI, r3
 8003278:	f3bf 8f6f 	isb	sy
 800327c:	f3bf 8f4f 	dsb	sy
 8003280:	623b      	str	r3, [r7, #32]
}
 8003282:	bf00      	nop
 8003284:	bf00      	nop
 8003286:	e7fd      	b.n	8003284 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003288:	f001 f9fc 	bl	8004684 <xTaskGetSchedulerState>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d102      	bne.n	8003298 <xQueueGenericSend+0xa4>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <xQueueGenericSend+0xa8>
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <xQueueGenericSend+0xaa>
 800329c:	2300      	movs	r3, #0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10b      	bne.n	80032ba <xQueueGenericSend+0xc6>
	__asm volatile
 80032a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032a6:	f383 8811 	msr	BASEPRI, r3
 80032aa:	f3bf 8f6f 	isb	sy
 80032ae:	f3bf 8f4f 	dsb	sy
 80032b2:	61fb      	str	r3, [r7, #28]
}
 80032b4:	bf00      	nop
 80032b6:	bf00      	nop
 80032b8:	e7fd      	b.n	80032b6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80032ba:	f001 ff4d 	bl	8005158 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d302      	bcc.n	80032d0 <xQueueGenericSend+0xdc>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d129      	bne.n	8003324 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	68b9      	ldr	r1, [r7, #8]
 80032d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80032d6:	f000 fa0f 	bl	80036f8 <prvCopyDataToQueue>
 80032da:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d010      	beq.n	8003306 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032e6:	3324      	adds	r3, #36	@ 0x24
 80032e8:	4618      	mov	r0, r3
 80032ea:	f001 f805 	bl	80042f8 <xTaskRemoveFromEventList>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d013      	beq.n	800331c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80032f4:	4b3f      	ldr	r3, [pc, #252]	@ (80033f4 <xQueueGenericSend+0x200>)
 80032f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	f3bf 8f4f 	dsb	sy
 8003300:	f3bf 8f6f 	isb	sy
 8003304:	e00a      	b.n	800331c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003308:	2b00      	cmp	r3, #0
 800330a:	d007      	beq.n	800331c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800330c:	4b39      	ldr	r3, [pc, #228]	@ (80033f4 <xQueueGenericSend+0x200>)
 800330e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	f3bf 8f4f 	dsb	sy
 8003318:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800331c:	f001 ff4e 	bl	80051bc <vPortExitCritical>
				return pdPASS;
 8003320:	2301      	movs	r3, #1
 8003322:	e063      	b.n	80033ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d103      	bne.n	8003332 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800332a:	f001 ff47 	bl	80051bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800332e:	2300      	movs	r3, #0
 8003330:	e05c      	b.n	80033ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003334:	2b00      	cmp	r3, #0
 8003336:	d106      	bne.n	8003346 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003338:	f107 0314 	add.w	r3, r7, #20
 800333c:	4618      	mov	r0, r3
 800333e:	f001 f83f 	bl	80043c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003342:	2301      	movs	r3, #1
 8003344:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003346:	f001 ff39 	bl	80051bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800334a:	f000 fda7 	bl	8003e9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800334e:	f001 ff03 	bl	8005158 <vPortEnterCritical>
 8003352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003354:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003358:	b25b      	sxtb	r3, r3
 800335a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335e:	d103      	bne.n	8003368 <xQueueGenericSend+0x174>
 8003360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800336a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800336e:	b25b      	sxtb	r3, r3
 8003370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003374:	d103      	bne.n	800337e <xQueueGenericSend+0x18a>
 8003376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800337e:	f001 ff1d 	bl	80051bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003382:	1d3a      	adds	r2, r7, #4
 8003384:	f107 0314 	add.w	r3, r7, #20
 8003388:	4611      	mov	r1, r2
 800338a:	4618      	mov	r0, r3
 800338c:	f001 f82e 	bl	80043ec <xTaskCheckForTimeOut>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d124      	bne.n	80033e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003396:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003398:	f000 faa6 	bl	80038e8 <prvIsQueueFull>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d018      	beq.n	80033d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80033a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033a4:	3310      	adds	r3, #16
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	4611      	mov	r1, r2
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 ff52 	bl	8004254 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80033b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033b2:	f000 fa31 	bl	8003818 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80033b6:	f000 fd7f 	bl	8003eb8 <xTaskResumeAll>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f47f af7c 	bne.w	80032ba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80033c2:	4b0c      	ldr	r3, [pc, #48]	@ (80033f4 <xQueueGenericSend+0x200>)
 80033c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	f3bf 8f4f 	dsb	sy
 80033ce:	f3bf 8f6f 	isb	sy
 80033d2:	e772      	b.n	80032ba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80033d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033d6:	f000 fa1f 	bl	8003818 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033da:	f000 fd6d 	bl	8003eb8 <xTaskResumeAll>
 80033de:	e76c      	b.n	80032ba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80033e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033e2:	f000 fa19 	bl	8003818 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033e6:	f000 fd67 	bl	8003eb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80033ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3738      	adds	r7, #56	@ 0x38
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	e000ed04 	.word	0xe000ed04

080033f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b090      	sub	sp, #64	@ 0x40
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
 8003404:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800340a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10b      	bne.n	8003428 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003414:	f383 8811 	msr	BASEPRI, r3
 8003418:	f3bf 8f6f 	isb	sy
 800341c:	f3bf 8f4f 	dsb	sy
 8003420:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003422:	bf00      	nop
 8003424:	bf00      	nop
 8003426:	e7fd      	b.n	8003424 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d103      	bne.n	8003436 <xQueueGenericSendFromISR+0x3e>
 800342e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <xQueueGenericSendFromISR+0x42>
 8003436:	2301      	movs	r3, #1
 8003438:	e000      	b.n	800343c <xQueueGenericSendFromISR+0x44>
 800343a:	2300      	movs	r3, #0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10b      	bne.n	8003458 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003444:	f383 8811 	msr	BASEPRI, r3
 8003448:	f3bf 8f6f 	isb	sy
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003452:	bf00      	nop
 8003454:	bf00      	nop
 8003456:	e7fd      	b.n	8003454 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d103      	bne.n	8003466 <xQueueGenericSendFromISR+0x6e>
 800345e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <xQueueGenericSendFromISR+0x72>
 8003466:	2301      	movs	r3, #1
 8003468:	e000      	b.n	800346c <xQueueGenericSendFromISR+0x74>
 800346a:	2300      	movs	r3, #0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10b      	bne.n	8003488 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	623b      	str	r3, [r7, #32]
}
 8003482:	bf00      	nop
 8003484:	bf00      	nop
 8003486:	e7fd      	b.n	8003484 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003488:	f001 ff46 	bl	8005318 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800348c:	f3ef 8211 	mrs	r2, BASEPRI
 8003490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003494:	f383 8811 	msr	BASEPRI, r3
 8003498:	f3bf 8f6f 	isb	sy
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	61fa      	str	r2, [r7, #28]
 80034a2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80034a4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80034a6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d302      	bcc.n	80034ba <xQueueGenericSendFromISR+0xc2>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d12f      	bne.n	800351a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80034ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	68b9      	ldr	r1, [r7, #8]
 80034ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80034d0:	f000 f912 	bl	80036f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80034d4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80034d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034dc:	d112      	bne.n	8003504 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d016      	beq.n	8003514 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e8:	3324      	adds	r3, #36	@ 0x24
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 ff04 	bl	80042f8 <xTaskRemoveFromEventList>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00e      	beq.n	8003514 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00b      	beq.n	8003514 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	e007      	b.n	8003514 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003504:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003508:	3301      	adds	r3, #1
 800350a:	b2db      	uxtb	r3, r3
 800350c:	b25a      	sxtb	r2, r3
 800350e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003510:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003514:	2301      	movs	r3, #1
 8003516:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003518:	e001      	b.n	800351e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800351a:	2300      	movs	r3, #0
 800351c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800351e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003520:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003528:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800352a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800352c:	4618      	mov	r0, r3
 800352e:	3740      	adds	r7, #64	@ 0x40
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b08c      	sub	sp, #48	@ 0x30
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003540:	2300      	movs	r3, #0
 8003542:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10b      	bne.n	8003566 <xQueueReceive+0x32>
	__asm volatile
 800354e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003552:	f383 8811 	msr	BASEPRI, r3
 8003556:	f3bf 8f6f 	isb	sy
 800355a:	f3bf 8f4f 	dsb	sy
 800355e:	623b      	str	r3, [r7, #32]
}
 8003560:	bf00      	nop
 8003562:	bf00      	nop
 8003564:	e7fd      	b.n	8003562 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d103      	bne.n	8003574 <xQueueReceive+0x40>
 800356c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800356e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <xQueueReceive+0x44>
 8003574:	2301      	movs	r3, #1
 8003576:	e000      	b.n	800357a <xQueueReceive+0x46>
 8003578:	2300      	movs	r3, #0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10b      	bne.n	8003596 <xQueueReceive+0x62>
	__asm volatile
 800357e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003582:	f383 8811 	msr	BASEPRI, r3
 8003586:	f3bf 8f6f 	isb	sy
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	61fb      	str	r3, [r7, #28]
}
 8003590:	bf00      	nop
 8003592:	bf00      	nop
 8003594:	e7fd      	b.n	8003592 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003596:	f001 f875 	bl	8004684 <xTaskGetSchedulerState>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d102      	bne.n	80035a6 <xQueueReceive+0x72>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <xQueueReceive+0x76>
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <xQueueReceive+0x78>
 80035aa:	2300      	movs	r3, #0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10b      	bne.n	80035c8 <xQueueReceive+0x94>
	__asm volatile
 80035b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b4:	f383 8811 	msr	BASEPRI, r3
 80035b8:	f3bf 8f6f 	isb	sy
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	61bb      	str	r3, [r7, #24]
}
 80035c2:	bf00      	nop
 80035c4:	bf00      	nop
 80035c6:	e7fd      	b.n	80035c4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80035c8:	f001 fdc6 	bl	8005158 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d01f      	beq.n	8003618 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80035d8:	68b9      	ldr	r1, [r7, #8]
 80035da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035dc:	f000 f8f6 	bl	80037cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80035e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e2:	1e5a      	subs	r2, r3, #1
 80035e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00f      	beq.n	8003610 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f2:	3310      	adds	r3, #16
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fe7f 	bl	80042f8 <xTaskRemoveFromEventList>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d007      	beq.n	8003610 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003600:	4b3c      	ldr	r3, [pc, #240]	@ (80036f4 <xQueueReceive+0x1c0>)
 8003602:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	f3bf 8f4f 	dsb	sy
 800360c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003610:	f001 fdd4 	bl	80051bc <vPortExitCritical>
				return pdPASS;
 8003614:	2301      	movs	r3, #1
 8003616:	e069      	b.n	80036ec <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d103      	bne.n	8003626 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800361e:	f001 fdcd 	bl	80051bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003622:	2300      	movs	r3, #0
 8003624:	e062      	b.n	80036ec <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003628:	2b00      	cmp	r3, #0
 800362a:	d106      	bne.n	800363a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800362c:	f107 0310 	add.w	r3, r7, #16
 8003630:	4618      	mov	r0, r3
 8003632:	f000 fec5 	bl	80043c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003636:	2301      	movs	r3, #1
 8003638:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800363a:	f001 fdbf 	bl	80051bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800363e:	f000 fc2d 	bl	8003e9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003642:	f001 fd89 	bl	8005158 <vPortEnterCritical>
 8003646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003648:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800364c:	b25b      	sxtb	r3, r3
 800364e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003652:	d103      	bne.n	800365c <xQueueReceive+0x128>
 8003654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800365c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800365e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003662:	b25b      	sxtb	r3, r3
 8003664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003668:	d103      	bne.n	8003672 <xQueueReceive+0x13e>
 800366a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003672:	f001 fda3 	bl	80051bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003676:	1d3a      	adds	r2, r7, #4
 8003678:	f107 0310 	add.w	r3, r7, #16
 800367c:	4611      	mov	r1, r2
 800367e:	4618      	mov	r0, r3
 8003680:	f000 feb4 	bl	80043ec <xTaskCheckForTimeOut>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d123      	bne.n	80036d2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800368a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800368c:	f000 f916 	bl	80038bc <prvIsQueueEmpty>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d017      	beq.n	80036c6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003698:	3324      	adds	r3, #36	@ 0x24
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	4611      	mov	r1, r2
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 fdd8 	bl	8004254 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80036a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036a6:	f000 f8b7 	bl	8003818 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80036aa:	f000 fc05 	bl	8003eb8 <xTaskResumeAll>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d189      	bne.n	80035c8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80036b4:	4b0f      	ldr	r3, [pc, #60]	@ (80036f4 <xQueueReceive+0x1c0>)
 80036b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	f3bf 8f6f 	isb	sy
 80036c4:	e780      	b.n	80035c8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80036c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036c8:	f000 f8a6 	bl	8003818 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80036cc:	f000 fbf4 	bl	8003eb8 <xTaskResumeAll>
 80036d0:	e77a      	b.n	80035c8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80036d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036d4:	f000 f8a0 	bl	8003818 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036d8:	f000 fbee 	bl	8003eb8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036de:	f000 f8ed 	bl	80038bc <prvIsQueueEmpty>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f43f af6f 	beq.w	80035c8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80036ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3730      	adds	r7, #48	@ 0x30
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	e000ed04 	.word	0xe000ed04

080036f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003704:	2300      	movs	r3, #0
 8003706:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800370c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10d      	bne.n	8003732 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d14d      	bne.n	80037ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	4618      	mov	r0, r3
 8003724:	f000 ffcc 	bl	80046c0 <xTaskPriorityDisinherit>
 8003728:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	609a      	str	r2, [r3, #8]
 8003730:	e043      	b.n	80037ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d119      	bne.n	800376c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6858      	ldr	r0, [r3, #4]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003740:	461a      	mov	r2, r3
 8003742:	68b9      	ldr	r1, [r7, #8]
 8003744:	f002 f89c 	bl	8005880 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003750:	441a      	add	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	429a      	cmp	r2, r3
 8003760:	d32b      	bcc.n	80037ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	605a      	str	r2, [r3, #4]
 800376a:	e026      	b.n	80037ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	68d8      	ldr	r0, [r3, #12]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003774:	461a      	mov	r2, r3
 8003776:	68b9      	ldr	r1, [r7, #8]
 8003778:	f002 f882 	bl	8005880 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003784:	425b      	negs	r3, r3
 8003786:	441a      	add	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	429a      	cmp	r2, r3
 8003796:	d207      	bcs.n	80037a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a0:	425b      	negs	r3, r3
 80037a2:	441a      	add	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d105      	bne.n	80037ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1c5a      	adds	r2, r3, #1
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80037c2:	697b      	ldr	r3, [r7, #20]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d018      	beq.n	8003810 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e6:	441a      	add	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68da      	ldr	r2, [r3, #12]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d303      	bcc.n	8003800 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68d9      	ldr	r1, [r3, #12]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003808:	461a      	mov	r2, r3
 800380a:	6838      	ldr	r0, [r7, #0]
 800380c:	f002 f838 	bl	8005880 <memcpy>
	}
}
 8003810:	bf00      	nop
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003820:	f001 fc9a 	bl	8005158 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800382a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800382c:	e011      	b.n	8003852 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003832:	2b00      	cmp	r3, #0
 8003834:	d012      	beq.n	800385c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	3324      	adds	r3, #36	@ 0x24
 800383a:	4618      	mov	r0, r3
 800383c:	f000 fd5c 	bl	80042f8 <xTaskRemoveFromEventList>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003846:	f000 fe35 	bl	80044b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800384a:	7bfb      	ldrb	r3, [r7, #15]
 800384c:	3b01      	subs	r3, #1
 800384e:	b2db      	uxtb	r3, r3
 8003850:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003856:	2b00      	cmp	r3, #0
 8003858:	dce9      	bgt.n	800382e <prvUnlockQueue+0x16>
 800385a:	e000      	b.n	800385e <prvUnlockQueue+0x46>
					break;
 800385c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	22ff      	movs	r2, #255	@ 0xff
 8003862:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003866:	f001 fca9 	bl	80051bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800386a:	f001 fc75 	bl	8005158 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003874:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003876:	e011      	b.n	800389c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d012      	beq.n	80038a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3310      	adds	r3, #16
 8003884:	4618      	mov	r0, r3
 8003886:	f000 fd37 	bl	80042f8 <xTaskRemoveFromEventList>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003890:	f000 fe10 	bl	80044b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003894:	7bbb      	ldrb	r3, [r7, #14]
 8003896:	3b01      	subs	r3, #1
 8003898:	b2db      	uxtb	r3, r3
 800389a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800389c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	dce9      	bgt.n	8003878 <prvUnlockQueue+0x60>
 80038a4:	e000      	b.n	80038a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80038a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	22ff      	movs	r2, #255	@ 0xff
 80038ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80038b0:	f001 fc84 	bl	80051bc <vPortExitCritical>
}
 80038b4:	bf00      	nop
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038c4:	f001 fc48 	bl	8005158 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d102      	bne.n	80038d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80038d0:	2301      	movs	r3, #1
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	e001      	b.n	80038da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80038d6:	2300      	movs	r3, #0
 80038d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038da:	f001 fc6f 	bl	80051bc <vPortExitCritical>

	return xReturn;
 80038de:	68fb      	ldr	r3, [r7, #12]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038f0:	f001 fc32 	bl	8005158 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d102      	bne.n	8003906 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003900:	2301      	movs	r3, #1
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	e001      	b.n	800390a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003906:	2300      	movs	r3, #0
 8003908:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800390a:	f001 fc57 	bl	80051bc <vPortExitCritical>

	return xReturn;
 800390e:	68fb      	ldr	r3, [r7, #12]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	e014      	b.n	8003952 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003928:	4a0f      	ldr	r2, [pc, #60]	@ (8003968 <vQueueAddToRegistry+0x50>)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10b      	bne.n	800394c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003934:	490c      	ldr	r1, [pc, #48]	@ (8003968 <vQueueAddToRegistry+0x50>)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800393e:	4a0a      	ldr	r2, [pc, #40]	@ (8003968 <vQueueAddToRegistry+0x50>)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	4413      	add	r3, r2
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800394a:	e006      	b.n	800395a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	3301      	adds	r3, #1
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2b07      	cmp	r3, #7
 8003956:	d9e7      	bls.n	8003928 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003958:	bf00      	nop
 800395a:	bf00      	nop
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	2000089c 	.word	0x2000089c

0800396c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800397c:	f001 fbec 	bl	8005158 <vPortEnterCritical>
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003986:	b25b      	sxtb	r3, r3
 8003988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398c:	d103      	bne.n	8003996 <vQueueWaitForMessageRestricted+0x2a>
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800399c:	b25b      	sxtb	r3, r3
 800399e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a2:	d103      	bne.n	80039ac <vQueueWaitForMessageRestricted+0x40>
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039ac:	f001 fc06 	bl	80051bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d106      	bne.n	80039c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	3324      	adds	r3, #36	@ 0x24
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	68b9      	ldr	r1, [r7, #8]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fc6d 	bl	80042a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80039c6:	6978      	ldr	r0, [r7, #20]
 80039c8:	f7ff ff26 	bl	8003818 <prvUnlockQueue>
	}
 80039cc:	bf00      	nop
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b08e      	sub	sp, #56	@ 0x38
 80039d8:	af04      	add	r7, sp, #16
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80039e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10b      	bne.n	8003a00 <xTaskCreateStatic+0x2c>
	__asm volatile
 80039e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ec:	f383 8811 	msr	BASEPRI, r3
 80039f0:	f3bf 8f6f 	isb	sy
 80039f4:	f3bf 8f4f 	dsb	sy
 80039f8:	623b      	str	r3, [r7, #32]
}
 80039fa:	bf00      	nop
 80039fc:	bf00      	nop
 80039fe:	e7fd      	b.n	80039fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10b      	bne.n	8003a1e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a0a:	f383 8811 	msr	BASEPRI, r3
 8003a0e:	f3bf 8f6f 	isb	sy
 8003a12:	f3bf 8f4f 	dsb	sy
 8003a16:	61fb      	str	r3, [r7, #28]
}
 8003a18:	bf00      	nop
 8003a1a:	bf00      	nop
 8003a1c:	e7fd      	b.n	8003a1a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a1e:	23a8      	movs	r3, #168	@ 0xa8
 8003a20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	2ba8      	cmp	r3, #168	@ 0xa8
 8003a26:	d00b      	beq.n	8003a40 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a2c:	f383 8811 	msr	BASEPRI, r3
 8003a30:	f3bf 8f6f 	isb	sy
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	61bb      	str	r3, [r7, #24]
}
 8003a3a:	bf00      	nop
 8003a3c:	bf00      	nop
 8003a3e:	e7fd      	b.n	8003a3c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003a40:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d01e      	beq.n	8003a86 <xTaskCreateStatic+0xb2>
 8003a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d01b      	beq.n	8003a86 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a50:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a56:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a60:	2300      	movs	r3, #0
 8003a62:	9303      	str	r3, [sp, #12]
 8003a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a66:	9302      	str	r3, [sp, #8]
 8003a68:	f107 0314 	add.w	r3, r7, #20
 8003a6c:	9301      	str	r3, [sp, #4]
 8003a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	68b9      	ldr	r1, [r7, #8]
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 f851 	bl	8003b20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003a80:	f000 f8f6 	bl	8003c70 <prvAddNewTaskToReadyList>
 8003a84:	e001      	b.n	8003a8a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003a86:	2300      	movs	r3, #0
 8003a88:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a8a:	697b      	ldr	r3, [r7, #20]
	}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3728      	adds	r7, #40	@ 0x28
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b08c      	sub	sp, #48	@ 0x30
 8003a98:	af04      	add	r7, sp, #16
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	603b      	str	r3, [r7, #0]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003aa4:	88fb      	ldrh	r3, [r7, #6]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f001 fc77 	bl	800539c <pvPortMalloc>
 8003aae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00e      	beq.n	8003ad4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ab6:	20a8      	movs	r0, #168	@ 0xa8
 8003ab8:	f001 fc70 	bl	800539c <pvPortMalloc>
 8003abc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	631a      	str	r2, [r3, #48]	@ 0x30
 8003aca:	e005      	b.n	8003ad8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003acc:	6978      	ldr	r0, [r7, #20]
 8003ace:	f001 fd33 	bl	8005538 <vPortFree>
 8003ad2:	e001      	b.n	8003ad8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d017      	beq.n	8003b0e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ae6:	88fa      	ldrh	r2, [r7, #6]
 8003ae8:	2300      	movs	r3, #0
 8003aea:	9303      	str	r3, [sp, #12]
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	9302      	str	r3, [sp, #8]
 8003af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003af2:	9301      	str	r3, [sp, #4]
 8003af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	68b9      	ldr	r1, [r7, #8]
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 f80f 	bl	8003b20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b02:	69f8      	ldr	r0, [r7, #28]
 8003b04:	f000 f8b4 	bl	8003c70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	61bb      	str	r3, [r7, #24]
 8003b0c:	e002      	b.n	8003b14 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b12:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b14:	69bb      	ldr	r3, [r7, #24]
	}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3720      	adds	r7, #32
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b088      	sub	sp, #32
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
 8003b2c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b30:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	461a      	mov	r2, r3
 8003b38:	21a5      	movs	r1, #165	@ 0xa5
 8003b3a:	f001 fe1d 	bl	8005778 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	f023 0307 	bic.w	r3, r3, #7
 8003b56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00b      	beq.n	8003b7a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b66:	f383 8811 	msr	BASEPRI, r3
 8003b6a:	f3bf 8f6f 	isb	sy
 8003b6e:	f3bf 8f4f 	dsb	sy
 8003b72:	617b      	str	r3, [r7, #20]
}
 8003b74:	bf00      	nop
 8003b76:	bf00      	nop
 8003b78:	e7fd      	b.n	8003b76 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d01f      	beq.n	8003bc0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b80:	2300      	movs	r3, #0
 8003b82:	61fb      	str	r3, [r7, #28]
 8003b84:	e012      	b.n	8003bac <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	7819      	ldrb	r1, [r3, #0]
 8003b8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	4413      	add	r3, r2
 8003b94:	3334      	adds	r3, #52	@ 0x34
 8003b96:	460a      	mov	r2, r1
 8003b98:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d006      	beq.n	8003bb4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	61fb      	str	r3, [r7, #28]
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	2b0f      	cmp	r3, #15
 8003bb0:	d9e9      	bls.n	8003b86 <prvInitialiseNewTask+0x66>
 8003bb2:	e000      	b.n	8003bb6 <prvInitialiseNewTask+0x96>
			{
				break;
 8003bb4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003bbe:	e003      	b.n	8003bc8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bca:	2b37      	cmp	r3, #55	@ 0x37
 8003bcc:	d901      	bls.n	8003bd2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003bce:	2337      	movs	r3, #55	@ 0x37
 8003bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bd6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bdc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be0:	2200      	movs	r2, #0
 8003be2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be6:	3304      	adds	r3, #4
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7ff f965 	bl	8002eb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf0:	3318      	adds	r3, #24
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff f960 	bl	8002eb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bfc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c00:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c06:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c0c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c10:	2200      	movs	r2, #0
 8003c12:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c20:	3354      	adds	r3, #84	@ 0x54
 8003c22:	224c      	movs	r2, #76	@ 0x4c
 8003c24:	2100      	movs	r1, #0
 8003c26:	4618      	mov	r0, r3
 8003c28:	f001 fda6 	bl	8005778 <memset>
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2e:	4a0d      	ldr	r2, [pc, #52]	@ (8003c64 <prvInitialiseNewTask+0x144>)
 8003c30:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c34:	4a0c      	ldr	r2, [pc, #48]	@ (8003c68 <prvInitialiseNewTask+0x148>)
 8003c36:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3a:	4a0c      	ldr	r2, [pc, #48]	@ (8003c6c <prvInitialiseNewTask+0x14c>)
 8003c3c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	68f9      	ldr	r1, [r7, #12]
 8003c42:	69b8      	ldr	r0, [r7, #24]
 8003c44:	f001 f95a 	bl	8004efc <pxPortInitialiseStack>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c4c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c5a:	bf00      	nop
 8003c5c:	3720      	adds	r7, #32
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20004b30 	.word	0x20004b30
 8003c68:	20004b98 	.word	0x20004b98
 8003c6c:	20004c00 	.word	0x20004c00

08003c70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c78:	f001 fa6e 	bl	8005158 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c7c:	4b2d      	ldr	r3, [pc, #180]	@ (8003d34 <prvAddNewTaskToReadyList+0xc4>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	3301      	adds	r3, #1
 8003c82:	4a2c      	ldr	r2, [pc, #176]	@ (8003d34 <prvAddNewTaskToReadyList+0xc4>)
 8003c84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c86:	4b2c      	ldr	r3, [pc, #176]	@ (8003d38 <prvAddNewTaskToReadyList+0xc8>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d109      	bne.n	8003ca2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c8e:	4a2a      	ldr	r2, [pc, #168]	@ (8003d38 <prvAddNewTaskToReadyList+0xc8>)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c94:	4b27      	ldr	r3, [pc, #156]	@ (8003d34 <prvAddNewTaskToReadyList+0xc4>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d110      	bne.n	8003cbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c9c:	f000 fc2e 	bl	80044fc <prvInitialiseTaskLists>
 8003ca0:	e00d      	b.n	8003cbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ca2:	4b26      	ldr	r3, [pc, #152]	@ (8003d3c <prvAddNewTaskToReadyList+0xcc>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d109      	bne.n	8003cbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003caa:	4b23      	ldr	r3, [pc, #140]	@ (8003d38 <prvAddNewTaskToReadyList+0xc8>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d802      	bhi.n	8003cbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003cb8:	4a1f      	ldr	r2, [pc, #124]	@ (8003d38 <prvAddNewTaskToReadyList+0xc8>)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003cbe:	4b20      	ldr	r3, [pc, #128]	@ (8003d40 <prvAddNewTaskToReadyList+0xd0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	4a1e      	ldr	r2, [pc, #120]	@ (8003d40 <prvAddNewTaskToReadyList+0xd0>)
 8003cc6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d40 <prvAddNewTaskToReadyList+0xd0>)
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d44 <prvAddNewTaskToReadyList+0xd4>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d903      	bls.n	8003ce4 <prvAddNewTaskToReadyList+0x74>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce0:	4a18      	ldr	r2, [pc, #96]	@ (8003d44 <prvAddNewTaskToReadyList+0xd4>)
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ce8:	4613      	mov	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4413      	add	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4a15      	ldr	r2, [pc, #84]	@ (8003d48 <prvAddNewTaskToReadyList+0xd8>)
 8003cf2:	441a      	add	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4610      	mov	r0, r2
 8003cfc:	f7ff f8e9 	bl	8002ed2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d00:	f001 fa5c 	bl	80051bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d04:	4b0d      	ldr	r3, [pc, #52]	@ (8003d3c <prvAddNewTaskToReadyList+0xcc>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00e      	beq.n	8003d2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d38 <prvAddNewTaskToReadyList+0xc8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d207      	bcs.n	8003d2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d4c <prvAddNewTaskToReadyList+0xdc>)
 8003d1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d2a:	bf00      	nop
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	20000db0 	.word	0x20000db0
 8003d38:	200008dc 	.word	0x200008dc
 8003d3c:	20000dbc 	.word	0x20000dbc
 8003d40:	20000dcc 	.word	0x20000dcc
 8003d44:	20000db8 	.word	0x20000db8
 8003d48:	200008e0 	.word	0x200008e0
 8003d4c:	e000ed04 	.word	0xe000ed04

08003d50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d018      	beq.n	8003d94 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d62:	4b14      	ldr	r3, [pc, #80]	@ (8003db4 <vTaskDelay+0x64>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00b      	beq.n	8003d82 <vTaskDelay+0x32>
	__asm volatile
 8003d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d6e:	f383 8811 	msr	BASEPRI, r3
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	60bb      	str	r3, [r7, #8]
}
 8003d7c:	bf00      	nop
 8003d7e:	bf00      	nop
 8003d80:	e7fd      	b.n	8003d7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003d82:	f000 f88b 	bl	8003e9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d86:	2100      	movs	r1, #0
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 fd09 	bl	80047a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d8e:	f000 f893 	bl	8003eb8 <xTaskResumeAll>
 8003d92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d107      	bne.n	8003daa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003d9a:	4b07      	ldr	r3, [pc, #28]	@ (8003db8 <vTaskDelay+0x68>)
 8003d9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	f3bf 8f4f 	dsb	sy
 8003da6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003daa:	bf00      	nop
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	20000dd8 	.word	0x20000dd8
 8003db8:	e000ed04 	.word	0xe000ed04

08003dbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08a      	sub	sp, #40	@ 0x28
 8003dc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003dca:	463a      	mov	r2, r7
 8003dcc:	1d39      	adds	r1, r7, #4
 8003dce:	f107 0308 	add.w	r3, r7, #8
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7ff f81c 	bl	8002e10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003dd8:	6839      	ldr	r1, [r7, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	9202      	str	r2, [sp, #8]
 8003de0:	9301      	str	r3, [sp, #4]
 8003de2:	2300      	movs	r3, #0
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	2300      	movs	r3, #0
 8003de8:	460a      	mov	r2, r1
 8003dea:	4924      	ldr	r1, [pc, #144]	@ (8003e7c <vTaskStartScheduler+0xc0>)
 8003dec:	4824      	ldr	r0, [pc, #144]	@ (8003e80 <vTaskStartScheduler+0xc4>)
 8003dee:	f7ff fdf1 	bl	80039d4 <xTaskCreateStatic>
 8003df2:	4603      	mov	r3, r0
 8003df4:	4a23      	ldr	r2, [pc, #140]	@ (8003e84 <vTaskStartScheduler+0xc8>)
 8003df6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003df8:	4b22      	ldr	r3, [pc, #136]	@ (8003e84 <vTaskStartScheduler+0xc8>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e00:	2301      	movs	r3, #1
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	e001      	b.n	8003e0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d102      	bne.n	8003e16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003e10:	f000 fd1a 	bl	8004848 <xTimerCreateTimerTask>
 8003e14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d11b      	bne.n	8003e54 <vTaskStartScheduler+0x98>
	__asm volatile
 8003e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e20:	f383 8811 	msr	BASEPRI, r3
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	613b      	str	r3, [r7, #16]
}
 8003e2e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003e30:	4b15      	ldr	r3, [pc, #84]	@ (8003e88 <vTaskStartScheduler+0xcc>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	3354      	adds	r3, #84	@ 0x54
 8003e36:	4a15      	ldr	r2, [pc, #84]	@ (8003e8c <vTaskStartScheduler+0xd0>)
 8003e38:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e3a:	4b15      	ldr	r3, [pc, #84]	@ (8003e90 <vTaskStartScheduler+0xd4>)
 8003e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e42:	4b14      	ldr	r3, [pc, #80]	@ (8003e94 <vTaskStartScheduler+0xd8>)
 8003e44:	2201      	movs	r2, #1
 8003e46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e48:	4b13      	ldr	r3, [pc, #76]	@ (8003e98 <vTaskStartScheduler+0xdc>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e4e:	f001 f8df 	bl	8005010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e52:	e00f      	b.n	8003e74 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5a:	d10b      	bne.n	8003e74 <vTaskStartScheduler+0xb8>
	__asm volatile
 8003e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e60:	f383 8811 	msr	BASEPRI, r3
 8003e64:	f3bf 8f6f 	isb	sy
 8003e68:	f3bf 8f4f 	dsb	sy
 8003e6c:	60fb      	str	r3, [r7, #12]
}
 8003e6e:	bf00      	nop
 8003e70:	bf00      	nop
 8003e72:	e7fd      	b.n	8003e70 <vTaskStartScheduler+0xb4>
}
 8003e74:	bf00      	nop
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	080059b8 	.word	0x080059b8
 8003e80:	080044cd 	.word	0x080044cd
 8003e84:	20000dd4 	.word	0x20000dd4
 8003e88:	200008dc 	.word	0x200008dc
 8003e8c:	20000038 	.word	0x20000038
 8003e90:	20000dd0 	.word	0x20000dd0
 8003e94:	20000dbc 	.word	0x20000dbc
 8003e98:	20000db4 	.word	0x20000db4

08003e9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ea0:	4b04      	ldr	r3, [pc, #16]	@ (8003eb4 <vTaskSuspendAll+0x18>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	4a03      	ldr	r2, [pc, #12]	@ (8003eb4 <vTaskSuspendAll+0x18>)
 8003ea8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003eaa:	bf00      	nop
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	20000dd8 	.word	0x20000dd8

08003eb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ec6:	4b42      	ldr	r3, [pc, #264]	@ (8003fd0 <xTaskResumeAll+0x118>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10b      	bne.n	8003ee6 <xTaskResumeAll+0x2e>
	__asm volatile
 8003ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	603b      	str	r3, [r7, #0]
}
 8003ee0:	bf00      	nop
 8003ee2:	bf00      	nop
 8003ee4:	e7fd      	b.n	8003ee2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ee6:	f001 f937 	bl	8005158 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003eea:	4b39      	ldr	r3, [pc, #228]	@ (8003fd0 <xTaskResumeAll+0x118>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	4a37      	ldr	r2, [pc, #220]	@ (8003fd0 <xTaskResumeAll+0x118>)
 8003ef2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ef4:	4b36      	ldr	r3, [pc, #216]	@ (8003fd0 <xTaskResumeAll+0x118>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d162      	bne.n	8003fc2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003efc:	4b35      	ldr	r3, [pc, #212]	@ (8003fd4 <xTaskResumeAll+0x11c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d05e      	beq.n	8003fc2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f04:	e02f      	b.n	8003f66 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f06:	4b34      	ldr	r3, [pc, #208]	@ (8003fd8 <xTaskResumeAll+0x120>)
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	3318      	adds	r3, #24
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff f83a 	bl	8002f8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff f835 	bl	8002f8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f26:	4b2d      	ldr	r3, [pc, #180]	@ (8003fdc <xTaskResumeAll+0x124>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d903      	bls.n	8003f36 <xTaskResumeAll+0x7e>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f32:	4a2a      	ldr	r2, [pc, #168]	@ (8003fdc <xTaskResumeAll+0x124>)
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4413      	add	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4a27      	ldr	r2, [pc, #156]	@ (8003fe0 <xTaskResumeAll+0x128>)
 8003f44:	441a      	add	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	3304      	adds	r3, #4
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	f7fe ffc0 	bl	8002ed2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f56:	4b23      	ldr	r3, [pc, #140]	@ (8003fe4 <xTaskResumeAll+0x12c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d302      	bcc.n	8003f66 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003f60:	4b21      	ldr	r3, [pc, #132]	@ (8003fe8 <xTaskResumeAll+0x130>)
 8003f62:	2201      	movs	r2, #1
 8003f64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f66:	4b1c      	ldr	r3, [pc, #112]	@ (8003fd8 <xTaskResumeAll+0x120>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1cb      	bne.n	8003f06 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f74:	f000 fb66 	bl	8004644 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f78:	4b1c      	ldr	r3, [pc, #112]	@ (8003fec <xTaskResumeAll+0x134>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d010      	beq.n	8003fa6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f84:	f000 f846 	bl	8004014 <xTaskIncrementTick>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003f8e:	4b16      	ldr	r3, [pc, #88]	@ (8003fe8 <xTaskResumeAll+0x130>)
 8003f90:	2201      	movs	r2, #1
 8003f92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1f1      	bne.n	8003f84 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003fa0:	4b12      	ldr	r3, [pc, #72]	@ (8003fec <xTaskResumeAll+0x134>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003fa6:	4b10      	ldr	r3, [pc, #64]	@ (8003fe8 <xTaskResumeAll+0x130>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d009      	beq.n	8003fc2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8003ff0 <xTaskResumeAll+0x138>)
 8003fb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	f3bf 8f4f 	dsb	sy
 8003fbe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fc2:	f001 f8fb 	bl	80051bc <vPortExitCritical>

	return xAlreadyYielded;
 8003fc6:	68bb      	ldr	r3, [r7, #8]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	20000dd8 	.word	0x20000dd8
 8003fd4:	20000db0 	.word	0x20000db0
 8003fd8:	20000d70 	.word	0x20000d70
 8003fdc:	20000db8 	.word	0x20000db8
 8003fe0:	200008e0 	.word	0x200008e0
 8003fe4:	200008dc 	.word	0x200008dc
 8003fe8:	20000dc4 	.word	0x20000dc4
 8003fec:	20000dc0 	.word	0x20000dc0
 8003ff0:	e000ed04 	.word	0xe000ed04

08003ff4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003ffa:	4b05      	ldr	r3, [pc, #20]	@ (8004010 <xTaskGetTickCount+0x1c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004000:	687b      	ldr	r3, [r7, #4]
}
 8004002:	4618      	mov	r0, r3
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	20000db4 	.word	0x20000db4

08004014 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800401a:	2300      	movs	r3, #0
 800401c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800401e:	4b4f      	ldr	r3, [pc, #316]	@ (800415c <xTaskIncrementTick+0x148>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	f040 8090 	bne.w	8004148 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004028:	4b4d      	ldr	r3, [pc, #308]	@ (8004160 <xTaskIncrementTick+0x14c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	3301      	adds	r3, #1
 800402e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004030:	4a4b      	ldr	r2, [pc, #300]	@ (8004160 <xTaskIncrementTick+0x14c>)
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d121      	bne.n	8004080 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800403c:	4b49      	ldr	r3, [pc, #292]	@ (8004164 <xTaskIncrementTick+0x150>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00b      	beq.n	800405e <xTaskIncrementTick+0x4a>
	__asm volatile
 8004046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800404a:	f383 8811 	msr	BASEPRI, r3
 800404e:	f3bf 8f6f 	isb	sy
 8004052:	f3bf 8f4f 	dsb	sy
 8004056:	603b      	str	r3, [r7, #0]
}
 8004058:	bf00      	nop
 800405a:	bf00      	nop
 800405c:	e7fd      	b.n	800405a <xTaskIncrementTick+0x46>
 800405e:	4b41      	ldr	r3, [pc, #260]	@ (8004164 <xTaskIncrementTick+0x150>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	4b40      	ldr	r3, [pc, #256]	@ (8004168 <xTaskIncrementTick+0x154>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a3e      	ldr	r2, [pc, #248]	@ (8004164 <xTaskIncrementTick+0x150>)
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	4a3e      	ldr	r2, [pc, #248]	@ (8004168 <xTaskIncrementTick+0x154>)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6013      	str	r3, [r2, #0]
 8004072:	4b3e      	ldr	r3, [pc, #248]	@ (800416c <xTaskIncrementTick+0x158>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3301      	adds	r3, #1
 8004078:	4a3c      	ldr	r2, [pc, #240]	@ (800416c <xTaskIncrementTick+0x158>)
 800407a:	6013      	str	r3, [r2, #0]
 800407c:	f000 fae2 	bl	8004644 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004080:	4b3b      	ldr	r3, [pc, #236]	@ (8004170 <xTaskIncrementTick+0x15c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	429a      	cmp	r2, r3
 8004088:	d349      	bcc.n	800411e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800408a:	4b36      	ldr	r3, [pc, #216]	@ (8004164 <xTaskIncrementTick+0x150>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d104      	bne.n	800409e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004094:	4b36      	ldr	r3, [pc, #216]	@ (8004170 <xTaskIncrementTick+0x15c>)
 8004096:	f04f 32ff 	mov.w	r2, #4294967295
 800409a:	601a      	str	r2, [r3, #0]
					break;
 800409c:	e03f      	b.n	800411e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800409e:	4b31      	ldr	r3, [pc, #196]	@ (8004164 <xTaskIncrementTick+0x150>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d203      	bcs.n	80040be <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80040b6:	4a2e      	ldr	r2, [pc, #184]	@ (8004170 <xTaskIncrementTick+0x15c>)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80040bc:	e02f      	b.n	800411e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	3304      	adds	r3, #4
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fe ff62 	bl	8002f8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d004      	beq.n	80040da <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	3318      	adds	r3, #24
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fe ff59 	bl	8002f8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040de:	4b25      	ldr	r3, [pc, #148]	@ (8004174 <xTaskIncrementTick+0x160>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d903      	bls.n	80040ee <xTaskIncrementTick+0xda>
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ea:	4a22      	ldr	r2, [pc, #136]	@ (8004174 <xTaskIncrementTick+0x160>)
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040f2:	4613      	mov	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4a1f      	ldr	r2, [pc, #124]	@ (8004178 <xTaskIncrementTick+0x164>)
 80040fc:	441a      	add	r2, r3
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	3304      	adds	r3, #4
 8004102:	4619      	mov	r1, r3
 8004104:	4610      	mov	r0, r2
 8004106:	f7fe fee4 	bl	8002ed2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800410e:	4b1b      	ldr	r3, [pc, #108]	@ (800417c <xTaskIncrementTick+0x168>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004114:	429a      	cmp	r2, r3
 8004116:	d3b8      	bcc.n	800408a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004118:	2301      	movs	r3, #1
 800411a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800411c:	e7b5      	b.n	800408a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800411e:	4b17      	ldr	r3, [pc, #92]	@ (800417c <xTaskIncrementTick+0x168>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004124:	4914      	ldr	r1, [pc, #80]	@ (8004178 <xTaskIncrementTick+0x164>)
 8004126:	4613      	mov	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	440b      	add	r3, r1
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d901      	bls.n	800413a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004136:	2301      	movs	r3, #1
 8004138:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800413a:	4b11      	ldr	r3, [pc, #68]	@ (8004180 <xTaskIncrementTick+0x16c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d007      	beq.n	8004152 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004142:	2301      	movs	r3, #1
 8004144:	617b      	str	r3, [r7, #20]
 8004146:	e004      	b.n	8004152 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004148:	4b0e      	ldr	r3, [pc, #56]	@ (8004184 <xTaskIncrementTick+0x170>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3301      	adds	r3, #1
 800414e:	4a0d      	ldr	r2, [pc, #52]	@ (8004184 <xTaskIncrementTick+0x170>)
 8004150:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004152:	697b      	ldr	r3, [r7, #20]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3718      	adds	r7, #24
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	20000dd8 	.word	0x20000dd8
 8004160:	20000db4 	.word	0x20000db4
 8004164:	20000d68 	.word	0x20000d68
 8004168:	20000d6c 	.word	0x20000d6c
 800416c:	20000dc8 	.word	0x20000dc8
 8004170:	20000dd0 	.word	0x20000dd0
 8004174:	20000db8 	.word	0x20000db8
 8004178:	200008e0 	.word	0x200008e0
 800417c:	200008dc 	.word	0x200008dc
 8004180:	20000dc4 	.word	0x20000dc4
 8004184:	20000dc0 	.word	0x20000dc0

08004188 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800418e:	4b2b      	ldr	r3, [pc, #172]	@ (800423c <vTaskSwitchContext+0xb4>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004196:	4b2a      	ldr	r3, [pc, #168]	@ (8004240 <vTaskSwitchContext+0xb8>)
 8004198:	2201      	movs	r2, #1
 800419a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800419c:	e047      	b.n	800422e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800419e:	4b28      	ldr	r3, [pc, #160]	@ (8004240 <vTaskSwitchContext+0xb8>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041a4:	4b27      	ldr	r3, [pc, #156]	@ (8004244 <vTaskSwitchContext+0xbc>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	60fb      	str	r3, [r7, #12]
 80041aa:	e011      	b.n	80041d0 <vTaskSwitchContext+0x48>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10b      	bne.n	80041ca <vTaskSwitchContext+0x42>
	__asm volatile
 80041b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b6:	f383 8811 	msr	BASEPRI, r3
 80041ba:	f3bf 8f6f 	isb	sy
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	607b      	str	r3, [r7, #4]
}
 80041c4:	bf00      	nop
 80041c6:	bf00      	nop
 80041c8:	e7fd      	b.n	80041c6 <vTaskSwitchContext+0x3e>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	3b01      	subs	r3, #1
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	491d      	ldr	r1, [pc, #116]	@ (8004248 <vTaskSwitchContext+0xc0>)
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4613      	mov	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0e3      	beq.n	80041ac <vTaskSwitchContext+0x24>
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	4613      	mov	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4a16      	ldr	r2, [pc, #88]	@ (8004248 <vTaskSwitchContext+0xc0>)
 80041f0:	4413      	add	r3, r2
 80041f2:	60bb      	str	r3, [r7, #8]
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	605a      	str	r2, [r3, #4]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	3308      	adds	r3, #8
 8004206:	429a      	cmp	r2, r3
 8004208:	d104      	bne.n	8004214 <vTaskSwitchContext+0x8c>
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	605a      	str	r2, [r3, #4]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	4a0c      	ldr	r2, [pc, #48]	@ (800424c <vTaskSwitchContext+0xc4>)
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	4a09      	ldr	r2, [pc, #36]	@ (8004244 <vTaskSwitchContext+0xbc>)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004224:	4b09      	ldr	r3, [pc, #36]	@ (800424c <vTaskSwitchContext+0xc4>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	3354      	adds	r3, #84	@ 0x54
 800422a:	4a09      	ldr	r2, [pc, #36]	@ (8004250 <vTaskSwitchContext+0xc8>)
 800422c:	6013      	str	r3, [r2, #0]
}
 800422e:	bf00      	nop
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	20000dd8 	.word	0x20000dd8
 8004240:	20000dc4 	.word	0x20000dc4
 8004244:	20000db8 	.word	0x20000db8
 8004248:	200008e0 	.word	0x200008e0
 800424c:	200008dc 	.word	0x200008dc
 8004250:	20000038 	.word	0x20000038

08004254 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10b      	bne.n	800427c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004268:	f383 8811 	msr	BASEPRI, r3
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	60fb      	str	r3, [r7, #12]
}
 8004276:	bf00      	nop
 8004278:	bf00      	nop
 800427a:	e7fd      	b.n	8004278 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800427c:	4b07      	ldr	r3, [pc, #28]	@ (800429c <vTaskPlaceOnEventList+0x48>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3318      	adds	r3, #24
 8004282:	4619      	mov	r1, r3
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f7fe fe48 	bl	8002f1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800428a:	2101      	movs	r1, #1
 800428c:	6838      	ldr	r0, [r7, #0]
 800428e:	f000 fa87 	bl	80047a0 <prvAddCurrentTaskToDelayedList>
}
 8004292:	bf00      	nop
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	200008dc 	.word	0x200008dc

080042a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10b      	bne.n	80042ca <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80042b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b6:	f383 8811 	msr	BASEPRI, r3
 80042ba:	f3bf 8f6f 	isb	sy
 80042be:	f3bf 8f4f 	dsb	sy
 80042c2:	617b      	str	r3, [r7, #20]
}
 80042c4:	bf00      	nop
 80042c6:	bf00      	nop
 80042c8:	e7fd      	b.n	80042c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042ca:	4b0a      	ldr	r3, [pc, #40]	@ (80042f4 <vTaskPlaceOnEventListRestricted+0x54>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	3318      	adds	r3, #24
 80042d0:	4619      	mov	r1, r3
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f7fe fdfd 	bl	8002ed2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d002      	beq.n	80042e4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80042de:	f04f 33ff 	mov.w	r3, #4294967295
 80042e2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	68b8      	ldr	r0, [r7, #8]
 80042e8:	f000 fa5a 	bl	80047a0 <prvAddCurrentTaskToDelayedList>
	}
 80042ec:	bf00      	nop
 80042ee:	3718      	adds	r7, #24
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	200008dc 	.word	0x200008dc

080042f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10b      	bne.n	8004326 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800430e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	60fb      	str	r3, [r7, #12]
}
 8004320:	bf00      	nop
 8004322:	bf00      	nop
 8004324:	e7fd      	b.n	8004322 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	3318      	adds	r3, #24
 800432a:	4618      	mov	r0, r3
 800432c:	f7fe fe2e 	bl	8002f8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004330:	4b1d      	ldr	r3, [pc, #116]	@ (80043a8 <xTaskRemoveFromEventList+0xb0>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d11d      	bne.n	8004374 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	3304      	adds	r3, #4
 800433c:	4618      	mov	r0, r3
 800433e:	f7fe fe25 	bl	8002f8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004346:	4b19      	ldr	r3, [pc, #100]	@ (80043ac <xTaskRemoveFromEventList+0xb4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d903      	bls.n	8004356 <xTaskRemoveFromEventList+0x5e>
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004352:	4a16      	ldr	r2, [pc, #88]	@ (80043ac <xTaskRemoveFromEventList+0xb4>)
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800435a:	4613      	mov	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	4a13      	ldr	r2, [pc, #76]	@ (80043b0 <xTaskRemoveFromEventList+0xb8>)
 8004364:	441a      	add	r2, r3
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	3304      	adds	r3, #4
 800436a:	4619      	mov	r1, r3
 800436c:	4610      	mov	r0, r2
 800436e:	f7fe fdb0 	bl	8002ed2 <vListInsertEnd>
 8004372:	e005      	b.n	8004380 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	3318      	adds	r3, #24
 8004378:	4619      	mov	r1, r3
 800437a:	480e      	ldr	r0, [pc, #56]	@ (80043b4 <xTaskRemoveFromEventList+0xbc>)
 800437c:	f7fe fda9 	bl	8002ed2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004384:	4b0c      	ldr	r3, [pc, #48]	@ (80043b8 <xTaskRemoveFromEventList+0xc0>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438a:	429a      	cmp	r2, r3
 800438c:	d905      	bls.n	800439a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800438e:	2301      	movs	r3, #1
 8004390:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004392:	4b0a      	ldr	r3, [pc, #40]	@ (80043bc <xTaskRemoveFromEventList+0xc4>)
 8004394:	2201      	movs	r2, #1
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	e001      	b.n	800439e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800439a:	2300      	movs	r3, #0
 800439c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800439e:	697b      	ldr	r3, [r7, #20]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	20000dd8 	.word	0x20000dd8
 80043ac:	20000db8 	.word	0x20000db8
 80043b0:	200008e0 	.word	0x200008e0
 80043b4:	20000d70 	.word	0x20000d70
 80043b8:	200008dc 	.word	0x200008dc
 80043bc:	20000dc4 	.word	0x20000dc4

080043c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80043c8:	4b06      	ldr	r3, [pc, #24]	@ (80043e4 <vTaskInternalSetTimeOutState+0x24>)
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80043d0:	4b05      	ldr	r3, [pc, #20]	@ (80043e8 <vTaskInternalSetTimeOutState+0x28>)
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	605a      	str	r2, [r3, #4]
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	20000dc8 	.word	0x20000dc8
 80043e8:	20000db4 	.word	0x20000db4

080043ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b088      	sub	sp, #32
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10b      	bne.n	8004414 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80043fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	613b      	str	r3, [r7, #16]
}
 800440e:	bf00      	nop
 8004410:	bf00      	nop
 8004412:	e7fd      	b.n	8004410 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10b      	bne.n	8004432 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	60fb      	str	r3, [r7, #12]
}
 800442c:	bf00      	nop
 800442e:	bf00      	nop
 8004430:	e7fd      	b.n	800442e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004432:	f000 fe91 	bl	8005158 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004436:	4b1d      	ldr	r3, [pc, #116]	@ (80044ac <xTaskCheckForTimeOut+0xc0>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444e:	d102      	bne.n	8004456 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004450:	2300      	movs	r3, #0
 8004452:	61fb      	str	r3, [r7, #28]
 8004454:	e023      	b.n	800449e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	4b15      	ldr	r3, [pc, #84]	@ (80044b0 <xTaskCheckForTimeOut+0xc4>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d007      	beq.n	8004472 <xTaskCheckForTimeOut+0x86>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	429a      	cmp	r2, r3
 800446a:	d302      	bcc.n	8004472 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800446c:	2301      	movs	r3, #1
 800446e:	61fb      	str	r3, [r7, #28]
 8004470:	e015      	b.n	800449e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	429a      	cmp	r2, r3
 800447a:	d20b      	bcs.n	8004494 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	1ad2      	subs	r2, r2, r3
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7ff ff99 	bl	80043c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800448e:	2300      	movs	r3, #0
 8004490:	61fb      	str	r3, [r7, #28]
 8004492:	e004      	b.n	800449e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800449a:	2301      	movs	r3, #1
 800449c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800449e:	f000 fe8d 	bl	80051bc <vPortExitCritical>

	return xReturn;
 80044a2:	69fb      	ldr	r3, [r7, #28]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3720      	adds	r7, #32
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	20000db4 	.word	0x20000db4
 80044b0:	20000dc8 	.word	0x20000dc8

080044b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80044b8:	4b03      	ldr	r3, [pc, #12]	@ (80044c8 <vTaskMissedYield+0x14>)
 80044ba:	2201      	movs	r2, #1
 80044bc:	601a      	str	r2, [r3, #0]
}
 80044be:	bf00      	nop
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	20000dc4 	.word	0x20000dc4

080044cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80044d4:	f000 f852 	bl	800457c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80044d8:	4b06      	ldr	r3, [pc, #24]	@ (80044f4 <prvIdleTask+0x28>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d9f9      	bls.n	80044d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80044e0:	4b05      	ldr	r3, [pc, #20]	@ (80044f8 <prvIdleTask+0x2c>)
 80044e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80044f0:	e7f0      	b.n	80044d4 <prvIdleTask+0x8>
 80044f2:	bf00      	nop
 80044f4:	200008e0 	.word	0x200008e0
 80044f8:	e000ed04 	.word	0xe000ed04

080044fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004502:	2300      	movs	r3, #0
 8004504:	607b      	str	r3, [r7, #4]
 8004506:	e00c      	b.n	8004522 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	4613      	mov	r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	4413      	add	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4a12      	ldr	r2, [pc, #72]	@ (800455c <prvInitialiseTaskLists+0x60>)
 8004514:	4413      	add	r3, r2
 8004516:	4618      	mov	r0, r3
 8004518:	f7fe fcae 	bl	8002e78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3301      	adds	r3, #1
 8004520:	607b      	str	r3, [r7, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b37      	cmp	r3, #55	@ 0x37
 8004526:	d9ef      	bls.n	8004508 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004528:	480d      	ldr	r0, [pc, #52]	@ (8004560 <prvInitialiseTaskLists+0x64>)
 800452a:	f7fe fca5 	bl	8002e78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800452e:	480d      	ldr	r0, [pc, #52]	@ (8004564 <prvInitialiseTaskLists+0x68>)
 8004530:	f7fe fca2 	bl	8002e78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004534:	480c      	ldr	r0, [pc, #48]	@ (8004568 <prvInitialiseTaskLists+0x6c>)
 8004536:	f7fe fc9f 	bl	8002e78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800453a:	480c      	ldr	r0, [pc, #48]	@ (800456c <prvInitialiseTaskLists+0x70>)
 800453c:	f7fe fc9c 	bl	8002e78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004540:	480b      	ldr	r0, [pc, #44]	@ (8004570 <prvInitialiseTaskLists+0x74>)
 8004542:	f7fe fc99 	bl	8002e78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004546:	4b0b      	ldr	r3, [pc, #44]	@ (8004574 <prvInitialiseTaskLists+0x78>)
 8004548:	4a05      	ldr	r2, [pc, #20]	@ (8004560 <prvInitialiseTaskLists+0x64>)
 800454a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800454c:	4b0a      	ldr	r3, [pc, #40]	@ (8004578 <prvInitialiseTaskLists+0x7c>)
 800454e:	4a05      	ldr	r2, [pc, #20]	@ (8004564 <prvInitialiseTaskLists+0x68>)
 8004550:	601a      	str	r2, [r3, #0]
}
 8004552:	bf00      	nop
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	200008e0 	.word	0x200008e0
 8004560:	20000d40 	.word	0x20000d40
 8004564:	20000d54 	.word	0x20000d54
 8004568:	20000d70 	.word	0x20000d70
 800456c:	20000d84 	.word	0x20000d84
 8004570:	20000d9c 	.word	0x20000d9c
 8004574:	20000d68 	.word	0x20000d68
 8004578:	20000d6c 	.word	0x20000d6c

0800457c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004582:	e019      	b.n	80045b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004584:	f000 fde8 	bl	8005158 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004588:	4b10      	ldr	r3, [pc, #64]	@ (80045cc <prvCheckTasksWaitingTermination+0x50>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	3304      	adds	r3, #4
 8004594:	4618      	mov	r0, r3
 8004596:	f7fe fcf9 	bl	8002f8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800459a:	4b0d      	ldr	r3, [pc, #52]	@ (80045d0 <prvCheckTasksWaitingTermination+0x54>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	3b01      	subs	r3, #1
 80045a0:	4a0b      	ldr	r2, [pc, #44]	@ (80045d0 <prvCheckTasksWaitingTermination+0x54>)
 80045a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80045a4:	4b0b      	ldr	r3, [pc, #44]	@ (80045d4 <prvCheckTasksWaitingTermination+0x58>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3b01      	subs	r3, #1
 80045aa:	4a0a      	ldr	r2, [pc, #40]	@ (80045d4 <prvCheckTasksWaitingTermination+0x58>)
 80045ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80045ae:	f000 fe05 	bl	80051bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f810 	bl	80045d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045b8:	4b06      	ldr	r3, [pc, #24]	@ (80045d4 <prvCheckTasksWaitingTermination+0x58>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1e1      	bne.n	8004584 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80045c0:	bf00      	nop
 80045c2:	bf00      	nop
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	20000d84 	.word	0x20000d84
 80045d0:	20000db0 	.word	0x20000db0
 80045d4:	20000d98 	.word	0x20000d98

080045d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	3354      	adds	r3, #84	@ 0x54
 80045e4:	4618      	mov	r0, r3
 80045e6:	f001 f8cf 	bl	8005788 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d108      	bne.n	8004606 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 ff9d 	bl	8005538 <vPortFree>
				vPortFree( pxTCB );
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 ff9a 	bl	8005538 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004604:	e019      	b.n	800463a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800460c:	2b01      	cmp	r3, #1
 800460e:	d103      	bne.n	8004618 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 ff91 	bl	8005538 <vPortFree>
	}
 8004616:	e010      	b.n	800463a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800461e:	2b02      	cmp	r3, #2
 8004620:	d00b      	beq.n	800463a <prvDeleteTCB+0x62>
	__asm volatile
 8004622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004626:	f383 8811 	msr	BASEPRI, r3
 800462a:	f3bf 8f6f 	isb	sy
 800462e:	f3bf 8f4f 	dsb	sy
 8004632:	60fb      	str	r3, [r7, #12]
}
 8004634:	bf00      	nop
 8004636:	bf00      	nop
 8004638:	e7fd      	b.n	8004636 <prvDeleteTCB+0x5e>
	}
 800463a:	bf00      	nop
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
	...

08004644 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800464a:	4b0c      	ldr	r3, [pc, #48]	@ (800467c <prvResetNextTaskUnblockTime+0x38>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d104      	bne.n	800465e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004654:	4b0a      	ldr	r3, [pc, #40]	@ (8004680 <prvResetNextTaskUnblockTime+0x3c>)
 8004656:	f04f 32ff 	mov.w	r2, #4294967295
 800465a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800465c:	e008      	b.n	8004670 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800465e:	4b07      	ldr	r3, [pc, #28]	@ (800467c <prvResetNextTaskUnblockTime+0x38>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	4a04      	ldr	r2, [pc, #16]	@ (8004680 <prvResetNextTaskUnblockTime+0x3c>)
 800466e:	6013      	str	r3, [r2, #0]
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	20000d68 	.word	0x20000d68
 8004680:	20000dd0 	.word	0x20000dd0

08004684 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800468a:	4b0b      	ldr	r3, [pc, #44]	@ (80046b8 <xTaskGetSchedulerState+0x34>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d102      	bne.n	8004698 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004692:	2301      	movs	r3, #1
 8004694:	607b      	str	r3, [r7, #4]
 8004696:	e008      	b.n	80046aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004698:	4b08      	ldr	r3, [pc, #32]	@ (80046bc <xTaskGetSchedulerState+0x38>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d102      	bne.n	80046a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80046a0:	2302      	movs	r3, #2
 80046a2:	607b      	str	r3, [r7, #4]
 80046a4:	e001      	b.n	80046aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80046a6:	2300      	movs	r3, #0
 80046a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80046aa:	687b      	ldr	r3, [r7, #4]
	}
 80046ac:	4618      	mov	r0, r3
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	20000dbc 	.word	0x20000dbc
 80046bc:	20000dd8 	.word	0x20000dd8

080046c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80046cc:	2300      	movs	r3, #0
 80046ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d058      	beq.n	8004788 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80046d6:	4b2f      	ldr	r3, [pc, #188]	@ (8004794 <xTaskPriorityDisinherit+0xd4>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d00b      	beq.n	80046f8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80046e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	60fb      	str	r3, [r7, #12]
}
 80046f2:	bf00      	nop
 80046f4:	bf00      	nop
 80046f6:	e7fd      	b.n	80046f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10b      	bne.n	8004718 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004704:	f383 8811 	msr	BASEPRI, r3
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	60bb      	str	r3, [r7, #8]
}
 8004712:	bf00      	nop
 8004714:	bf00      	nop
 8004716:	e7fd      	b.n	8004714 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800471c:	1e5a      	subs	r2, r3, #1
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800472a:	429a      	cmp	r2, r3
 800472c:	d02c      	beq.n	8004788 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004732:	2b00      	cmp	r3, #0
 8004734:	d128      	bne.n	8004788 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	3304      	adds	r3, #4
 800473a:	4618      	mov	r0, r3
 800473c:	f7fe fc26 	bl	8002f8c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004758:	4b0f      	ldr	r3, [pc, #60]	@ (8004798 <xTaskPriorityDisinherit+0xd8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	429a      	cmp	r2, r3
 800475e:	d903      	bls.n	8004768 <xTaskPriorityDisinherit+0xa8>
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004764:	4a0c      	ldr	r2, [pc, #48]	@ (8004798 <xTaskPriorityDisinherit+0xd8>)
 8004766:	6013      	str	r3, [r2, #0]
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800476c:	4613      	mov	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4a09      	ldr	r2, [pc, #36]	@ (800479c <xTaskPriorityDisinherit+0xdc>)
 8004776:	441a      	add	r2, r3
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	3304      	adds	r3, #4
 800477c:	4619      	mov	r1, r3
 800477e:	4610      	mov	r0, r2
 8004780:	f7fe fba7 	bl	8002ed2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004784:	2301      	movs	r3, #1
 8004786:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004788:	697b      	ldr	r3, [r7, #20]
	}
 800478a:	4618      	mov	r0, r3
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	200008dc 	.word	0x200008dc
 8004798:	20000db8 	.word	0x20000db8
 800479c:	200008e0 	.word	0x200008e0

080047a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80047aa:	4b21      	ldr	r3, [pc, #132]	@ (8004830 <prvAddCurrentTaskToDelayedList+0x90>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047b0:	4b20      	ldr	r3, [pc, #128]	@ (8004834 <prvAddCurrentTaskToDelayedList+0x94>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3304      	adds	r3, #4
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fe fbe8 	bl	8002f8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c2:	d10a      	bne.n	80047da <prvAddCurrentTaskToDelayedList+0x3a>
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d007      	beq.n	80047da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047ca:	4b1a      	ldr	r3, [pc, #104]	@ (8004834 <prvAddCurrentTaskToDelayedList+0x94>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3304      	adds	r3, #4
 80047d0:	4619      	mov	r1, r3
 80047d2:	4819      	ldr	r0, [pc, #100]	@ (8004838 <prvAddCurrentTaskToDelayedList+0x98>)
 80047d4:	f7fe fb7d 	bl	8002ed2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80047d8:	e026      	b.n	8004828 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4413      	add	r3, r2
 80047e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047e2:	4b14      	ldr	r3, [pc, #80]	@ (8004834 <prvAddCurrentTaskToDelayedList+0x94>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d209      	bcs.n	8004806 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047f2:	4b12      	ldr	r3, [pc, #72]	@ (800483c <prvAddCurrentTaskToDelayedList+0x9c>)
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004834 <prvAddCurrentTaskToDelayedList+0x94>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3304      	adds	r3, #4
 80047fc:	4619      	mov	r1, r3
 80047fe:	4610      	mov	r0, r2
 8004800:	f7fe fb8b 	bl	8002f1a <vListInsert>
}
 8004804:	e010      	b.n	8004828 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004806:	4b0e      	ldr	r3, [pc, #56]	@ (8004840 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	4b0a      	ldr	r3, [pc, #40]	@ (8004834 <prvAddCurrentTaskToDelayedList+0x94>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3304      	adds	r3, #4
 8004810:	4619      	mov	r1, r3
 8004812:	4610      	mov	r0, r2
 8004814:	f7fe fb81 	bl	8002f1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004818:	4b0a      	ldr	r3, [pc, #40]	@ (8004844 <prvAddCurrentTaskToDelayedList+0xa4>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	429a      	cmp	r2, r3
 8004820:	d202      	bcs.n	8004828 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004822:	4a08      	ldr	r2, [pc, #32]	@ (8004844 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	6013      	str	r3, [r2, #0]
}
 8004828:	bf00      	nop
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	20000db4 	.word	0x20000db4
 8004834:	200008dc 	.word	0x200008dc
 8004838:	20000d9c 	.word	0x20000d9c
 800483c:	20000d6c 	.word	0x20000d6c
 8004840:	20000d68 	.word	0x20000d68
 8004844:	20000dd0 	.word	0x20000dd0

08004848 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b08a      	sub	sp, #40	@ 0x28
 800484c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800484e:	2300      	movs	r3, #0
 8004850:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004852:	f000 fb13 	bl	8004e7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004856:	4b1d      	ldr	r3, [pc, #116]	@ (80048cc <xTimerCreateTimerTask+0x84>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d021      	beq.n	80048a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800485e:	2300      	movs	r3, #0
 8004860:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004862:	2300      	movs	r3, #0
 8004864:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004866:	1d3a      	adds	r2, r7, #4
 8004868:	f107 0108 	add.w	r1, r7, #8
 800486c:	f107 030c 	add.w	r3, r7, #12
 8004870:	4618      	mov	r0, r3
 8004872:	f7fe fae7 	bl	8002e44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004876:	6879      	ldr	r1, [r7, #4]
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	9202      	str	r2, [sp, #8]
 800487e:	9301      	str	r3, [sp, #4]
 8004880:	2302      	movs	r3, #2
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	2300      	movs	r3, #0
 8004886:	460a      	mov	r2, r1
 8004888:	4911      	ldr	r1, [pc, #68]	@ (80048d0 <xTimerCreateTimerTask+0x88>)
 800488a:	4812      	ldr	r0, [pc, #72]	@ (80048d4 <xTimerCreateTimerTask+0x8c>)
 800488c:	f7ff f8a2 	bl	80039d4 <xTaskCreateStatic>
 8004890:	4603      	mov	r3, r0
 8004892:	4a11      	ldr	r2, [pc, #68]	@ (80048d8 <xTimerCreateTimerTask+0x90>)
 8004894:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004896:	4b10      	ldr	r3, [pc, #64]	@ (80048d8 <xTimerCreateTimerTask+0x90>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800489e:	2301      	movs	r3, #1
 80048a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10b      	bne.n	80048c0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80048a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ac:	f383 8811 	msr	BASEPRI, r3
 80048b0:	f3bf 8f6f 	isb	sy
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	613b      	str	r3, [r7, #16]
}
 80048ba:	bf00      	nop
 80048bc:	bf00      	nop
 80048be:	e7fd      	b.n	80048bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80048c0:	697b      	ldr	r3, [r7, #20]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3718      	adds	r7, #24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	20000e0c 	.word	0x20000e0c
 80048d0:	080059c0 	.word	0x080059c0
 80048d4:	08004a15 	.word	0x08004a15
 80048d8:	20000e10 	.word	0x20000e10

080048dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b08a      	sub	sp, #40	@ 0x28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
 80048e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80048ea:	2300      	movs	r3, #0
 80048ec:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10b      	bne.n	800490c <xTimerGenericCommand+0x30>
	__asm volatile
 80048f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f8:	f383 8811 	msr	BASEPRI, r3
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	623b      	str	r3, [r7, #32]
}
 8004906:	bf00      	nop
 8004908:	bf00      	nop
 800490a:	e7fd      	b.n	8004908 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800490c:	4b19      	ldr	r3, [pc, #100]	@ (8004974 <xTimerGenericCommand+0x98>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d02a      	beq.n	800496a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	2b05      	cmp	r3, #5
 8004924:	dc18      	bgt.n	8004958 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004926:	f7ff fead 	bl	8004684 <xTaskGetSchedulerState>
 800492a:	4603      	mov	r3, r0
 800492c:	2b02      	cmp	r3, #2
 800492e:	d109      	bne.n	8004944 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004930:	4b10      	ldr	r3, [pc, #64]	@ (8004974 <xTimerGenericCommand+0x98>)
 8004932:	6818      	ldr	r0, [r3, #0]
 8004934:	f107 0110 	add.w	r1, r7, #16
 8004938:	2300      	movs	r3, #0
 800493a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800493c:	f7fe fc5a 	bl	80031f4 <xQueueGenericSend>
 8004940:	6278      	str	r0, [r7, #36]	@ 0x24
 8004942:	e012      	b.n	800496a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004944:	4b0b      	ldr	r3, [pc, #44]	@ (8004974 <xTimerGenericCommand+0x98>)
 8004946:	6818      	ldr	r0, [r3, #0]
 8004948:	f107 0110 	add.w	r1, r7, #16
 800494c:	2300      	movs	r3, #0
 800494e:	2200      	movs	r2, #0
 8004950:	f7fe fc50 	bl	80031f4 <xQueueGenericSend>
 8004954:	6278      	str	r0, [r7, #36]	@ 0x24
 8004956:	e008      	b.n	800496a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004958:	4b06      	ldr	r3, [pc, #24]	@ (8004974 <xTimerGenericCommand+0x98>)
 800495a:	6818      	ldr	r0, [r3, #0]
 800495c:	f107 0110 	add.w	r1, r7, #16
 8004960:	2300      	movs	r3, #0
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	f7fe fd48 	bl	80033f8 <xQueueGenericSendFromISR>
 8004968:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800496a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800496c:	4618      	mov	r0, r3
 800496e:	3728      	adds	r7, #40	@ 0x28
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	20000e0c 	.word	0x20000e0c

08004978 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af02      	add	r7, sp, #8
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004982:	4b23      	ldr	r3, [pc, #140]	@ (8004a10 <prvProcessExpiredTimer+0x98>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	3304      	adds	r3, #4
 8004990:	4618      	mov	r0, r3
 8004992:	f7fe fafb 	bl	8002f8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d023      	beq.n	80049ec <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	699a      	ldr	r2, [r3, #24]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	18d1      	adds	r1, r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	6978      	ldr	r0, [r7, #20]
 80049b2:	f000 f8d5 	bl	8004b60 <prvInsertTimerInActiveList>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d020      	beq.n	80049fe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049bc:	2300      	movs	r3, #0
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	2300      	movs	r3, #0
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	2100      	movs	r1, #0
 80049c6:	6978      	ldr	r0, [r7, #20]
 80049c8:	f7ff ff88 	bl	80048dc <xTimerGenericCommand>
 80049cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d114      	bne.n	80049fe <prvProcessExpiredTimer+0x86>
	__asm volatile
 80049d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d8:	f383 8811 	msr	BASEPRI, r3
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	60fb      	str	r3, [r7, #12]
}
 80049e6:	bf00      	nop
 80049e8:	bf00      	nop
 80049ea:	e7fd      	b.n	80049e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049f2:	f023 0301 	bic.w	r3, r3, #1
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	6978      	ldr	r0, [r7, #20]
 8004a04:	4798      	blx	r3
}
 8004a06:	bf00      	nop
 8004a08:	3718      	adds	r7, #24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	20000e04 	.word	0x20000e04

08004a14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a1c:	f107 0308 	add.w	r3, r7, #8
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 f859 	bl	8004ad8 <prvGetNextExpireTime>
 8004a26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 f805 	bl	8004a3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004a32:	f000 f8d7 	bl	8004be4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a36:	bf00      	nop
 8004a38:	e7f0      	b.n	8004a1c <prvTimerTask+0x8>
	...

08004a3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004a46:	f7ff fa29 	bl	8003e9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a4a:	f107 0308 	add.w	r3, r7, #8
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 f866 	bl	8004b20 <prvSampleTimeNow>
 8004a54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d130      	bne.n	8004abe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10a      	bne.n	8004a78 <prvProcessTimerOrBlockTask+0x3c>
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d806      	bhi.n	8004a78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004a6a:	f7ff fa25 	bl	8003eb8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004a6e:	68f9      	ldr	r1, [r7, #12]
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff ff81 	bl	8004978 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004a76:	e024      	b.n	8004ac2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d008      	beq.n	8004a90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004a7e:	4b13      	ldr	r3, [pc, #76]	@ (8004acc <prvProcessTimerOrBlockTask+0x90>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <prvProcessTimerOrBlockTask+0x50>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e000      	b.n	8004a8e <prvProcessTimerOrBlockTask+0x52>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004a90:	4b0f      	ldr	r3, [pc, #60]	@ (8004ad0 <prvProcessTimerOrBlockTask+0x94>)
 8004a92:	6818      	ldr	r0, [r3, #0]
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	f7fe ff65 	bl	800396c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004aa2:	f7ff fa09 	bl	8003eb8 <xTaskResumeAll>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10a      	bne.n	8004ac2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004aac:	4b09      	ldr	r3, [pc, #36]	@ (8004ad4 <prvProcessTimerOrBlockTask+0x98>)
 8004aae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	f3bf 8f6f 	isb	sy
}
 8004abc:	e001      	b.n	8004ac2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004abe:	f7ff f9fb 	bl	8003eb8 <xTaskResumeAll>
}
 8004ac2:	bf00      	nop
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	20000e08 	.word	0x20000e08
 8004ad0:	20000e0c 	.word	0x20000e0c
 8004ad4:	e000ed04 	.word	0xe000ed04

08004ad8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8004b1c <prvGetNextExpireTime+0x44>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <prvGetNextExpireTime+0x16>
 8004aea:	2201      	movs	r2, #1
 8004aec:	e000      	b.n	8004af0 <prvGetNextExpireTime+0x18>
 8004aee:	2200      	movs	r2, #0
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d105      	bne.n	8004b08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004afc:	4b07      	ldr	r3, [pc, #28]	@ (8004b1c <prvGetNextExpireTime+0x44>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	e001      	b.n	8004b0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3714      	adds	r7, #20
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	20000e04 	.word	0x20000e04

08004b20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004b28:	f7ff fa64 	bl	8003ff4 <xTaskGetTickCount>
 8004b2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b5c <prvSampleTimeNow+0x3c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d205      	bcs.n	8004b44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004b38:	f000 f93a 	bl	8004db0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	e002      	b.n	8004b4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004b4a:	4a04      	ldr	r2, [pc, #16]	@ (8004b5c <prvSampleTimeNow+0x3c>)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004b50:	68fb      	ldr	r3, [r7, #12]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20000e14 	.word	0x20000e14

08004b60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d812      	bhi.n	8004bac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	1ad2      	subs	r2, r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d302      	bcc.n	8004b9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004b94:	2301      	movs	r3, #1
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	e01b      	b.n	8004bd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004b9a:	4b10      	ldr	r3, [pc, #64]	@ (8004bdc <prvInsertTimerInActiveList+0x7c>)
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	3304      	adds	r3, #4
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	4610      	mov	r0, r2
 8004ba6:	f7fe f9b8 	bl	8002f1a <vListInsert>
 8004baa:	e012      	b.n	8004bd2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d206      	bcs.n	8004bc2 <prvInsertTimerInActiveList+0x62>
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d302      	bcc.n	8004bc2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	617b      	str	r3, [r7, #20]
 8004bc0:	e007      	b.n	8004bd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004bc2:	4b07      	ldr	r3, [pc, #28]	@ (8004be0 <prvInsertTimerInActiveList+0x80>)
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	3304      	adds	r3, #4
 8004bca:	4619      	mov	r1, r3
 8004bcc:	4610      	mov	r0, r2
 8004bce:	f7fe f9a4 	bl	8002f1a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004bd2:	697b      	ldr	r3, [r7, #20]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	20000e08 	.word	0x20000e08
 8004be0:	20000e04 	.word	0x20000e04

08004be4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b08e      	sub	sp, #56	@ 0x38
 8004be8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004bea:	e0ce      	b.n	8004d8a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	da19      	bge.n	8004c26 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004bf2:	1d3b      	adds	r3, r7, #4
 8004bf4:	3304      	adds	r3, #4
 8004bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10b      	bne.n	8004c16 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c02:	f383 8811 	msr	BASEPRI, r3
 8004c06:	f3bf 8f6f 	isb	sy
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	61fb      	str	r3, [r7, #28]
}
 8004c10:	bf00      	nop
 8004c12:	bf00      	nop
 8004c14:	e7fd      	b.n	8004c12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c1c:	6850      	ldr	r0, [r2, #4]
 8004c1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c20:	6892      	ldr	r2, [r2, #8]
 8004c22:	4611      	mov	r1, r2
 8004c24:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f2c0 80ae 	blt.w	8004d8a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d004      	beq.n	8004c44 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fe f9a4 	bl	8002f8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c44:	463b      	mov	r3, r7
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7ff ff6a 	bl	8004b20 <prvSampleTimeNow>
 8004c4c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b09      	cmp	r3, #9
 8004c52:	f200 8097 	bhi.w	8004d84 <prvProcessReceivedCommands+0x1a0>
 8004c56:	a201      	add	r2, pc, #4	@ (adr r2, 8004c5c <prvProcessReceivedCommands+0x78>)
 8004c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5c:	08004c85 	.word	0x08004c85
 8004c60:	08004c85 	.word	0x08004c85
 8004c64:	08004c85 	.word	0x08004c85
 8004c68:	08004cfb 	.word	0x08004cfb
 8004c6c:	08004d0f 	.word	0x08004d0f
 8004c70:	08004d5b 	.word	0x08004d5b
 8004c74:	08004c85 	.word	0x08004c85
 8004c78:	08004c85 	.word	0x08004c85
 8004c7c:	08004cfb 	.word	0x08004cfb
 8004c80:	08004d0f 	.word	0x08004d0f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c8a:	f043 0301 	orr.w	r3, r3, #1
 8004c8e:	b2da      	uxtb	r2, r3
 8004c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	18d1      	adds	r1, r2, r3
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ca2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ca4:	f7ff ff5c 	bl	8004b60 <prvInsertTimerInActiveList>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d06c      	beq.n	8004d88 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d061      	beq.n	8004d88 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	441a      	add	r2, r3
 8004ccc:	2300      	movs	r3, #0
 8004cce:	9300      	str	r3, [sp, #0]
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cd6:	f7ff fe01 	bl	80048dc <xTimerGenericCommand>
 8004cda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004cdc:	6a3b      	ldr	r3, [r7, #32]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d152      	bne.n	8004d88 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce6:	f383 8811 	msr	BASEPRI, r3
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	61bb      	str	r3, [r7, #24]
}
 8004cf4:	bf00      	nop
 8004cf6:	bf00      	nop
 8004cf8:	e7fd      	b.n	8004cf6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d00:	f023 0301 	bic.w	r3, r3, #1
 8004d04:	b2da      	uxtb	r2, r3
 8004d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d08:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004d0c:	e03d      	b.n	8004d8a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d14:	f043 0301 	orr.w	r3, r3, #1
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d24:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10b      	bne.n	8004d46 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	617b      	str	r3, [r7, #20]
}
 8004d40:	bf00      	nop
 8004d42:	bf00      	nop
 8004d44:	e7fd      	b.n	8004d42 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d48:	699a      	ldr	r2, [r3, #24]
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4c:	18d1      	adds	r1, r2, r3
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d54:	f7ff ff04 	bl	8004b60 <prvInsertTimerInActiveList>
					break;
 8004d58:	e017      	b.n	8004d8a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d103      	bne.n	8004d70 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004d68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d6a:	f000 fbe5 	bl	8005538 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004d6e:	e00c      	b.n	8004d8a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d76:	f023 0301 	bic.w	r3, r3, #1
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004d82:	e002      	b.n	8004d8a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004d84:	bf00      	nop
 8004d86:	e000      	b.n	8004d8a <prvProcessReceivedCommands+0x1a6>
					break;
 8004d88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d8a:	4b08      	ldr	r3, [pc, #32]	@ (8004dac <prvProcessReceivedCommands+0x1c8>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	1d39      	adds	r1, r7, #4
 8004d90:	2200      	movs	r2, #0
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7fe fbce 	bl	8003534 <xQueueReceive>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f47f af26 	bne.w	8004bec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004da0:	bf00      	nop
 8004da2:	bf00      	nop
 8004da4:	3730      	adds	r7, #48	@ 0x30
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	20000e0c 	.word	0x20000e0c

08004db0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b088      	sub	sp, #32
 8004db4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004db6:	e049      	b.n	8004e4c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004db8:	4b2e      	ldr	r3, [pc, #184]	@ (8004e74 <prvSwitchTimerLists+0xc4>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dc2:	4b2c      	ldr	r3, [pc, #176]	@ (8004e74 <prvSwitchTimerLists+0xc4>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	3304      	adds	r3, #4
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7fe f8db 	bl	8002f8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d02f      	beq.n	8004e4c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	4413      	add	r3, r2
 8004df4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d90e      	bls.n	8004e1c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8004e74 <prvSwitchTimerLists+0xc4>)
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3304      	adds	r3, #4
 8004e12:	4619      	mov	r1, r3
 8004e14:	4610      	mov	r0, r2
 8004e16:	f7fe f880 	bl	8002f1a <vListInsert>
 8004e1a:	e017      	b.n	8004e4c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	2300      	movs	r3, #0
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	2100      	movs	r1, #0
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f7ff fd58 	bl	80048dc <xTimerGenericCommand>
 8004e2c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10b      	bne.n	8004e4c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e38:	f383 8811 	msr	BASEPRI, r3
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	603b      	str	r3, [r7, #0]
}
 8004e46:	bf00      	nop
 8004e48:	bf00      	nop
 8004e4a:	e7fd      	b.n	8004e48 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e4c:	4b09      	ldr	r3, [pc, #36]	@ (8004e74 <prvSwitchTimerLists+0xc4>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1b0      	bne.n	8004db8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004e56:	4b07      	ldr	r3, [pc, #28]	@ (8004e74 <prvSwitchTimerLists+0xc4>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004e5c:	4b06      	ldr	r3, [pc, #24]	@ (8004e78 <prvSwitchTimerLists+0xc8>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a04      	ldr	r2, [pc, #16]	@ (8004e74 <prvSwitchTimerLists+0xc4>)
 8004e62:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004e64:	4a04      	ldr	r2, [pc, #16]	@ (8004e78 <prvSwitchTimerLists+0xc8>)
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	6013      	str	r3, [r2, #0]
}
 8004e6a:	bf00      	nop
 8004e6c:	3718      	adds	r7, #24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	20000e04 	.word	0x20000e04
 8004e78:	20000e08 	.word	0x20000e08

08004e7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004e82:	f000 f969 	bl	8005158 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004e86:	4b15      	ldr	r3, [pc, #84]	@ (8004edc <prvCheckForValidListAndQueue+0x60>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d120      	bne.n	8004ed0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004e8e:	4814      	ldr	r0, [pc, #80]	@ (8004ee0 <prvCheckForValidListAndQueue+0x64>)
 8004e90:	f7fd fff2 	bl	8002e78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004e94:	4813      	ldr	r0, [pc, #76]	@ (8004ee4 <prvCheckForValidListAndQueue+0x68>)
 8004e96:	f7fd ffef 	bl	8002e78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004e9a:	4b13      	ldr	r3, [pc, #76]	@ (8004ee8 <prvCheckForValidListAndQueue+0x6c>)
 8004e9c:	4a10      	ldr	r2, [pc, #64]	@ (8004ee0 <prvCheckForValidListAndQueue+0x64>)
 8004e9e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ea0:	4b12      	ldr	r3, [pc, #72]	@ (8004eec <prvCheckForValidListAndQueue+0x70>)
 8004ea2:	4a10      	ldr	r2, [pc, #64]	@ (8004ee4 <prvCheckForValidListAndQueue+0x68>)
 8004ea4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	4b11      	ldr	r3, [pc, #68]	@ (8004ef0 <prvCheckForValidListAndQueue+0x74>)
 8004eac:	4a11      	ldr	r2, [pc, #68]	@ (8004ef4 <prvCheckForValidListAndQueue+0x78>)
 8004eae:	2110      	movs	r1, #16
 8004eb0:	200a      	movs	r0, #10
 8004eb2:	f7fe f8ff 	bl	80030b4 <xQueueGenericCreateStatic>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	4a08      	ldr	r2, [pc, #32]	@ (8004edc <prvCheckForValidListAndQueue+0x60>)
 8004eba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004ebc:	4b07      	ldr	r3, [pc, #28]	@ (8004edc <prvCheckForValidListAndQueue+0x60>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d005      	beq.n	8004ed0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ec4:	4b05      	ldr	r3, [pc, #20]	@ (8004edc <prvCheckForValidListAndQueue+0x60>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	490b      	ldr	r1, [pc, #44]	@ (8004ef8 <prvCheckForValidListAndQueue+0x7c>)
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fe fd24 	bl	8003918 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ed0:	f000 f974 	bl	80051bc <vPortExitCritical>
}
 8004ed4:	bf00      	nop
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	20000e0c 	.word	0x20000e0c
 8004ee0:	20000ddc 	.word	0x20000ddc
 8004ee4:	20000df0 	.word	0x20000df0
 8004ee8:	20000e04 	.word	0x20000e04
 8004eec:	20000e08 	.word	0x20000e08
 8004ef0:	20000eb8 	.word	0x20000eb8
 8004ef4:	20000e18 	.word	0x20000e18
 8004ef8:	080059c8 	.word	0x080059c8

08004efc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	3b04      	subs	r3, #4
 8004f0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004f14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3b04      	subs	r3, #4
 8004f1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f023 0201 	bic.w	r2, r3, #1
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	3b04      	subs	r3, #4
 8004f2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f2c:	4a0c      	ldr	r2, [pc, #48]	@ (8004f60 <pxPortInitialiseStack+0x64>)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	3b14      	subs	r3, #20
 8004f36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	3b04      	subs	r3, #4
 8004f42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f06f 0202 	mvn.w	r2, #2
 8004f4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	3b20      	subs	r3, #32
 8004f50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f52:	68fb      	ldr	r3, [r7, #12]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	08004f65 	.word	0x08004f65

08004f64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f6e:	4b13      	ldr	r3, [pc, #76]	@ (8004fbc <prvTaskExitError+0x58>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f76:	d00b      	beq.n	8004f90 <prvTaskExitError+0x2c>
	__asm volatile
 8004f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f7c:	f383 8811 	msr	BASEPRI, r3
 8004f80:	f3bf 8f6f 	isb	sy
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	60fb      	str	r3, [r7, #12]
}
 8004f8a:	bf00      	nop
 8004f8c:	bf00      	nop
 8004f8e:	e7fd      	b.n	8004f8c <prvTaskExitError+0x28>
	__asm volatile
 8004f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f94:	f383 8811 	msr	BASEPRI, r3
 8004f98:	f3bf 8f6f 	isb	sy
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	60bb      	str	r3, [r7, #8]
}
 8004fa2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004fa4:	bf00      	nop
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d0fc      	beq.n	8004fa6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004fac:	bf00      	nop
 8004fae:	bf00      	nop
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	20000034 	.word	0x20000034

08004fc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004fc0:	4b07      	ldr	r3, [pc, #28]	@ (8004fe0 <pxCurrentTCBConst2>)
 8004fc2:	6819      	ldr	r1, [r3, #0]
 8004fc4:	6808      	ldr	r0, [r1, #0]
 8004fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fca:	f380 8809 	msr	PSP, r0
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f04f 0000 	mov.w	r0, #0
 8004fd6:	f380 8811 	msr	BASEPRI, r0
 8004fda:	4770      	bx	lr
 8004fdc:	f3af 8000 	nop.w

08004fe0 <pxCurrentTCBConst2>:
 8004fe0:	200008dc 	.word	0x200008dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004fe4:	bf00      	nop
 8004fe6:	bf00      	nop

08004fe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004fe8:	4808      	ldr	r0, [pc, #32]	@ (800500c <prvPortStartFirstTask+0x24>)
 8004fea:	6800      	ldr	r0, [r0, #0]
 8004fec:	6800      	ldr	r0, [r0, #0]
 8004fee:	f380 8808 	msr	MSP, r0
 8004ff2:	f04f 0000 	mov.w	r0, #0
 8004ff6:	f380 8814 	msr	CONTROL, r0
 8004ffa:	b662      	cpsie	i
 8004ffc:	b661      	cpsie	f
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	df00      	svc	0
 8005008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800500a:	bf00      	nop
 800500c:	e000ed08 	.word	0xe000ed08

08005010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005016:	4b47      	ldr	r3, [pc, #284]	@ (8005134 <xPortStartScheduler+0x124>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a47      	ldr	r2, [pc, #284]	@ (8005138 <xPortStartScheduler+0x128>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d10b      	bne.n	8005038 <xPortStartScheduler+0x28>
	__asm volatile
 8005020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	613b      	str	r3, [r7, #16]
}
 8005032:	bf00      	nop
 8005034:	bf00      	nop
 8005036:	e7fd      	b.n	8005034 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005038:	4b3e      	ldr	r3, [pc, #248]	@ (8005134 <xPortStartScheduler+0x124>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a3f      	ldr	r2, [pc, #252]	@ (800513c <xPortStartScheduler+0x12c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d10b      	bne.n	800505a <xPortStartScheduler+0x4a>
	__asm volatile
 8005042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005046:	f383 8811 	msr	BASEPRI, r3
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	60fb      	str	r3, [r7, #12]
}
 8005054:	bf00      	nop
 8005056:	bf00      	nop
 8005058:	e7fd      	b.n	8005056 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800505a:	4b39      	ldr	r3, [pc, #228]	@ (8005140 <xPortStartScheduler+0x130>)
 800505c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	b2db      	uxtb	r3, r3
 8005064:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	22ff      	movs	r2, #255	@ 0xff
 800506a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	b2db      	uxtb	r3, r3
 8005072:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005074:	78fb      	ldrb	r3, [r7, #3]
 8005076:	b2db      	uxtb	r3, r3
 8005078:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800507c:	b2da      	uxtb	r2, r3
 800507e:	4b31      	ldr	r3, [pc, #196]	@ (8005144 <xPortStartScheduler+0x134>)
 8005080:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005082:	4b31      	ldr	r3, [pc, #196]	@ (8005148 <xPortStartScheduler+0x138>)
 8005084:	2207      	movs	r2, #7
 8005086:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005088:	e009      	b.n	800509e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800508a:	4b2f      	ldr	r3, [pc, #188]	@ (8005148 <xPortStartScheduler+0x138>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	3b01      	subs	r3, #1
 8005090:	4a2d      	ldr	r2, [pc, #180]	@ (8005148 <xPortStartScheduler+0x138>)
 8005092:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005094:	78fb      	ldrb	r3, [r7, #3]
 8005096:	b2db      	uxtb	r3, r3
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	b2db      	uxtb	r3, r3
 800509c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800509e:	78fb      	ldrb	r3, [r7, #3]
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050a6:	2b80      	cmp	r3, #128	@ 0x80
 80050a8:	d0ef      	beq.n	800508a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80050aa:	4b27      	ldr	r3, [pc, #156]	@ (8005148 <xPortStartScheduler+0x138>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f1c3 0307 	rsb	r3, r3, #7
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	d00b      	beq.n	80050ce <xPortStartScheduler+0xbe>
	__asm volatile
 80050b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ba:	f383 8811 	msr	BASEPRI, r3
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	60bb      	str	r3, [r7, #8]
}
 80050c8:	bf00      	nop
 80050ca:	bf00      	nop
 80050cc:	e7fd      	b.n	80050ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005148 <xPortStartScheduler+0x138>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	021b      	lsls	r3, r3, #8
 80050d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005148 <xPortStartScheduler+0x138>)
 80050d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005148 <xPortStartScheduler+0x138>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80050e0:	4a19      	ldr	r2, [pc, #100]	@ (8005148 <xPortStartScheduler+0x138>)
 80050e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050ec:	4b17      	ldr	r3, [pc, #92]	@ (800514c <xPortStartScheduler+0x13c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a16      	ldr	r2, [pc, #88]	@ (800514c <xPortStartScheduler+0x13c>)
 80050f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80050f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050f8:	4b14      	ldr	r3, [pc, #80]	@ (800514c <xPortStartScheduler+0x13c>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a13      	ldr	r2, [pc, #76]	@ (800514c <xPortStartScheduler+0x13c>)
 80050fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005102:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005104:	f000 f8da 	bl	80052bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005108:	4b11      	ldr	r3, [pc, #68]	@ (8005150 <xPortStartScheduler+0x140>)
 800510a:	2200      	movs	r2, #0
 800510c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800510e:	f000 f8f9 	bl	8005304 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005112:	4b10      	ldr	r3, [pc, #64]	@ (8005154 <xPortStartScheduler+0x144>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a0f      	ldr	r2, [pc, #60]	@ (8005154 <xPortStartScheduler+0x144>)
 8005118:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800511c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800511e:	f7ff ff63 	bl	8004fe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005122:	f7ff f831 	bl	8004188 <vTaskSwitchContext>
	prvTaskExitError();
 8005126:	f7ff ff1d 	bl	8004f64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	e000ed00 	.word	0xe000ed00
 8005138:	410fc271 	.word	0x410fc271
 800513c:	410fc270 	.word	0x410fc270
 8005140:	e000e400 	.word	0xe000e400
 8005144:	20000f08 	.word	0x20000f08
 8005148:	20000f0c 	.word	0x20000f0c
 800514c:	e000ed20 	.word	0xe000ed20
 8005150:	20000034 	.word	0x20000034
 8005154:	e000ef34 	.word	0xe000ef34

08005158 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
	__asm volatile
 800515e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005162:	f383 8811 	msr	BASEPRI, r3
 8005166:	f3bf 8f6f 	isb	sy
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	607b      	str	r3, [r7, #4]
}
 8005170:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005172:	4b10      	ldr	r3, [pc, #64]	@ (80051b4 <vPortEnterCritical+0x5c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	3301      	adds	r3, #1
 8005178:	4a0e      	ldr	r2, [pc, #56]	@ (80051b4 <vPortEnterCritical+0x5c>)
 800517a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800517c:	4b0d      	ldr	r3, [pc, #52]	@ (80051b4 <vPortEnterCritical+0x5c>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d110      	bne.n	80051a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005184:	4b0c      	ldr	r3, [pc, #48]	@ (80051b8 <vPortEnterCritical+0x60>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00b      	beq.n	80051a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800518e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	603b      	str	r3, [r7, #0]
}
 80051a0:	bf00      	nop
 80051a2:	bf00      	nop
 80051a4:	e7fd      	b.n	80051a2 <vPortEnterCritical+0x4a>
	}
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	20000034 	.word	0x20000034
 80051b8:	e000ed04 	.word	0xe000ed04

080051bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80051c2:	4b12      	ldr	r3, [pc, #72]	@ (800520c <vPortExitCritical+0x50>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10b      	bne.n	80051e2 <vPortExitCritical+0x26>
	__asm volatile
 80051ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ce:	f383 8811 	msr	BASEPRI, r3
 80051d2:	f3bf 8f6f 	isb	sy
 80051d6:	f3bf 8f4f 	dsb	sy
 80051da:	607b      	str	r3, [r7, #4]
}
 80051dc:	bf00      	nop
 80051de:	bf00      	nop
 80051e0:	e7fd      	b.n	80051de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80051e2:	4b0a      	ldr	r3, [pc, #40]	@ (800520c <vPortExitCritical+0x50>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	3b01      	subs	r3, #1
 80051e8:	4a08      	ldr	r2, [pc, #32]	@ (800520c <vPortExitCritical+0x50>)
 80051ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051ec:	4b07      	ldr	r3, [pc, #28]	@ (800520c <vPortExitCritical+0x50>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d105      	bne.n	8005200 <vPortExitCritical+0x44>
 80051f4:	2300      	movs	r3, #0
 80051f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	f383 8811 	msr	BASEPRI, r3
}
 80051fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	20000034 	.word	0x20000034

08005210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005210:	f3ef 8009 	mrs	r0, PSP
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	4b15      	ldr	r3, [pc, #84]	@ (8005270 <pxCurrentTCBConst>)
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	f01e 0f10 	tst.w	lr, #16
 8005220:	bf08      	it	eq
 8005222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800522a:	6010      	str	r0, [r2, #0]
 800522c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005230:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005234:	f380 8811 	msr	BASEPRI, r0
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f7fe ffa2 	bl	8004188 <vTaskSwitchContext>
 8005244:	f04f 0000 	mov.w	r0, #0
 8005248:	f380 8811 	msr	BASEPRI, r0
 800524c:	bc09      	pop	{r0, r3}
 800524e:	6819      	ldr	r1, [r3, #0]
 8005250:	6808      	ldr	r0, [r1, #0]
 8005252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005256:	f01e 0f10 	tst.w	lr, #16
 800525a:	bf08      	it	eq
 800525c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005260:	f380 8809 	msr	PSP, r0
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	f3af 8000 	nop.w

08005270 <pxCurrentTCBConst>:
 8005270:	200008dc 	.word	0x200008dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005274:	bf00      	nop
 8005276:	bf00      	nop

08005278 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	607b      	str	r3, [r7, #4]
}
 8005290:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005292:	f7fe febf 	bl	8004014 <xTaskIncrementTick>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800529c:	4b06      	ldr	r3, [pc, #24]	@ (80052b8 <xPortSysTickHandler+0x40>)
 800529e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	2300      	movs	r3, #0
 80052a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	f383 8811 	msr	BASEPRI, r3
}
 80052ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80052b0:	bf00      	nop
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	e000ed04 	.word	0xe000ed04

080052bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80052bc:	b480      	push	{r7}
 80052be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052c0:	4b0b      	ldr	r3, [pc, #44]	@ (80052f0 <vPortSetupTimerInterrupt+0x34>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052c6:	4b0b      	ldr	r3, [pc, #44]	@ (80052f4 <vPortSetupTimerInterrupt+0x38>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052cc:	4b0a      	ldr	r3, [pc, #40]	@ (80052f8 <vPortSetupTimerInterrupt+0x3c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a0a      	ldr	r2, [pc, #40]	@ (80052fc <vPortSetupTimerInterrupt+0x40>)
 80052d2:	fba2 2303 	umull	r2, r3, r2, r3
 80052d6:	099b      	lsrs	r3, r3, #6
 80052d8:	4a09      	ldr	r2, [pc, #36]	@ (8005300 <vPortSetupTimerInterrupt+0x44>)
 80052da:	3b01      	subs	r3, #1
 80052dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80052de:	4b04      	ldr	r3, [pc, #16]	@ (80052f0 <vPortSetupTimerInterrupt+0x34>)
 80052e0:	2207      	movs	r2, #7
 80052e2:	601a      	str	r2, [r3, #0]
}
 80052e4:	bf00      	nop
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	e000e010 	.word	0xe000e010
 80052f4:	e000e018 	.word	0xe000e018
 80052f8:	20000028 	.word	0x20000028
 80052fc:	10624dd3 	.word	0x10624dd3
 8005300:	e000e014 	.word	0xe000e014

08005304 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005304:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005314 <vPortEnableVFP+0x10>
 8005308:	6801      	ldr	r1, [r0, #0]
 800530a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800530e:	6001      	str	r1, [r0, #0]
 8005310:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005312:	bf00      	nop
 8005314:	e000ed88 	.word	0xe000ed88

08005318 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800531e:	f3ef 8305 	mrs	r3, IPSR
 8005322:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2b0f      	cmp	r3, #15
 8005328:	d915      	bls.n	8005356 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800532a:	4a18      	ldr	r2, [pc, #96]	@ (800538c <vPortValidateInterruptPriority+0x74>)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4413      	add	r3, r2
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005334:	4b16      	ldr	r3, [pc, #88]	@ (8005390 <vPortValidateInterruptPriority+0x78>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	7afa      	ldrb	r2, [r7, #11]
 800533a:	429a      	cmp	r2, r3
 800533c:	d20b      	bcs.n	8005356 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800533e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005342:	f383 8811 	msr	BASEPRI, r3
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	607b      	str	r3, [r7, #4]
}
 8005350:	bf00      	nop
 8005352:	bf00      	nop
 8005354:	e7fd      	b.n	8005352 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005356:	4b0f      	ldr	r3, [pc, #60]	@ (8005394 <vPortValidateInterruptPriority+0x7c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800535e:	4b0e      	ldr	r3, [pc, #56]	@ (8005398 <vPortValidateInterruptPriority+0x80>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	429a      	cmp	r2, r3
 8005364:	d90b      	bls.n	800537e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800536a:	f383 8811 	msr	BASEPRI, r3
 800536e:	f3bf 8f6f 	isb	sy
 8005372:	f3bf 8f4f 	dsb	sy
 8005376:	603b      	str	r3, [r7, #0]
}
 8005378:	bf00      	nop
 800537a:	bf00      	nop
 800537c:	e7fd      	b.n	800537a <vPortValidateInterruptPriority+0x62>
	}
 800537e:	bf00      	nop
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	e000e3f0 	.word	0xe000e3f0
 8005390:	20000f08 	.word	0x20000f08
 8005394:	e000ed0c 	.word	0xe000ed0c
 8005398:	20000f0c 	.word	0x20000f0c

0800539c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b08a      	sub	sp, #40	@ 0x28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80053a4:	2300      	movs	r3, #0
 80053a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80053a8:	f7fe fd78 	bl	8003e9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80053ac:	4b5c      	ldr	r3, [pc, #368]	@ (8005520 <pvPortMalloc+0x184>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80053b4:	f000 f924 	bl	8005600 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80053b8:	4b5a      	ldr	r3, [pc, #360]	@ (8005524 <pvPortMalloc+0x188>)
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4013      	ands	r3, r2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f040 8095 	bne.w	80054f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d01e      	beq.n	800540a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80053cc:	2208      	movs	r2, #8
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4413      	add	r3, r2
 80053d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d015      	beq.n	800540a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f023 0307 	bic.w	r3, r3, #7
 80053e4:	3308      	adds	r3, #8
 80053e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f003 0307 	and.w	r3, r3, #7
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00b      	beq.n	800540a <pvPortMalloc+0x6e>
	__asm volatile
 80053f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	617b      	str	r3, [r7, #20]
}
 8005404:	bf00      	nop
 8005406:	bf00      	nop
 8005408:	e7fd      	b.n	8005406 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d06f      	beq.n	80054f0 <pvPortMalloc+0x154>
 8005410:	4b45      	ldr	r3, [pc, #276]	@ (8005528 <pvPortMalloc+0x18c>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	429a      	cmp	r2, r3
 8005418:	d86a      	bhi.n	80054f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800541a:	4b44      	ldr	r3, [pc, #272]	@ (800552c <pvPortMalloc+0x190>)
 800541c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800541e:	4b43      	ldr	r3, [pc, #268]	@ (800552c <pvPortMalloc+0x190>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005424:	e004      	b.n	8005430 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005428:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800542a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	429a      	cmp	r2, r3
 8005438:	d903      	bls.n	8005442 <pvPortMalloc+0xa6>
 800543a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1f1      	bne.n	8005426 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005442:	4b37      	ldr	r3, [pc, #220]	@ (8005520 <pvPortMalloc+0x184>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005448:	429a      	cmp	r2, r3
 800544a:	d051      	beq.n	80054f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2208      	movs	r2, #8
 8005452:	4413      	add	r3, r2
 8005454:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800545e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	1ad2      	subs	r2, r2, r3
 8005466:	2308      	movs	r3, #8
 8005468:	005b      	lsls	r3, r3, #1
 800546a:	429a      	cmp	r2, r3
 800546c:	d920      	bls.n	80054b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800546e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4413      	add	r3, r2
 8005474:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00b      	beq.n	8005498 <pvPortMalloc+0xfc>
	__asm volatile
 8005480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005484:	f383 8811 	msr	BASEPRI, r3
 8005488:	f3bf 8f6f 	isb	sy
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	613b      	str	r3, [r7, #16]
}
 8005492:	bf00      	nop
 8005494:	bf00      	nop
 8005496:	e7fd      	b.n	8005494 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	1ad2      	subs	r2, r2, r3
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80054a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80054aa:	69b8      	ldr	r0, [r7, #24]
 80054ac:	f000 f90a 	bl	80056c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80054b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005528 <pvPortMalloc+0x18c>)
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005528 <pvPortMalloc+0x18c>)
 80054bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80054be:	4b1a      	ldr	r3, [pc, #104]	@ (8005528 <pvPortMalloc+0x18c>)
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005530 <pvPortMalloc+0x194>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d203      	bcs.n	80054d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80054ca:	4b17      	ldr	r3, [pc, #92]	@ (8005528 <pvPortMalloc+0x18c>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a18      	ldr	r2, [pc, #96]	@ (8005530 <pvPortMalloc+0x194>)
 80054d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	4b13      	ldr	r3, [pc, #76]	@ (8005524 <pvPortMalloc+0x188>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	431a      	orrs	r2, r3
 80054dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80054e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e2:	2200      	movs	r2, #0
 80054e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80054e6:	4b13      	ldr	r3, [pc, #76]	@ (8005534 <pvPortMalloc+0x198>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3301      	adds	r3, #1
 80054ec:	4a11      	ldr	r2, [pc, #68]	@ (8005534 <pvPortMalloc+0x198>)
 80054ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80054f0:	f7fe fce2 	bl	8003eb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00b      	beq.n	8005516 <pvPortMalloc+0x17a>
	__asm volatile
 80054fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	60fb      	str	r3, [r7, #12]
}
 8005510:	bf00      	nop
 8005512:	bf00      	nop
 8005514:	e7fd      	b.n	8005512 <pvPortMalloc+0x176>
	return pvReturn;
 8005516:	69fb      	ldr	r3, [r7, #28]
}
 8005518:	4618      	mov	r0, r3
 800551a:	3728      	adds	r7, #40	@ 0x28
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	20004b18 	.word	0x20004b18
 8005524:	20004b2c 	.word	0x20004b2c
 8005528:	20004b1c 	.word	0x20004b1c
 800552c:	20004b10 	.word	0x20004b10
 8005530:	20004b20 	.word	0x20004b20
 8005534:	20004b24 	.word	0x20004b24

08005538 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d04f      	beq.n	80055ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800554a:	2308      	movs	r3, #8
 800554c:	425b      	negs	r3, r3
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	4413      	add	r3, r2
 8005552:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	4b25      	ldr	r3, [pc, #148]	@ (80055f4 <vPortFree+0xbc>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4013      	ands	r3, r2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10b      	bne.n	800557e <vPortFree+0x46>
	__asm volatile
 8005566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	60fb      	str	r3, [r7, #12]
}
 8005578:	bf00      	nop
 800557a:	bf00      	nop
 800557c:	e7fd      	b.n	800557a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00b      	beq.n	800559e <vPortFree+0x66>
	__asm volatile
 8005586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	60bb      	str	r3, [r7, #8]
}
 8005598:	bf00      	nop
 800559a:	bf00      	nop
 800559c:	e7fd      	b.n	800559a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	4b14      	ldr	r3, [pc, #80]	@ (80055f4 <vPortFree+0xbc>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4013      	ands	r3, r2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d01e      	beq.n	80055ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d11a      	bne.n	80055ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	4b0e      	ldr	r3, [pc, #56]	@ (80055f4 <vPortFree+0xbc>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	43db      	mvns	r3, r3
 80055be:	401a      	ands	r2, r3
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80055c4:	f7fe fc6a 	bl	8003e9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	4b0a      	ldr	r3, [pc, #40]	@ (80055f8 <vPortFree+0xc0>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4413      	add	r3, r2
 80055d2:	4a09      	ldr	r2, [pc, #36]	@ (80055f8 <vPortFree+0xc0>)
 80055d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055d6:	6938      	ldr	r0, [r7, #16]
 80055d8:	f000 f874 	bl	80056c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80055dc:	4b07      	ldr	r3, [pc, #28]	@ (80055fc <vPortFree+0xc4>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	3301      	adds	r3, #1
 80055e2:	4a06      	ldr	r2, [pc, #24]	@ (80055fc <vPortFree+0xc4>)
 80055e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80055e6:	f7fe fc67 	bl	8003eb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80055ea:	bf00      	nop
 80055ec:	3718      	adds	r7, #24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	20004b2c 	.word	0x20004b2c
 80055f8:	20004b1c 	.word	0x20004b1c
 80055fc:	20004b28 	.word	0x20004b28

08005600 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005606:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800560a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800560c:	4b27      	ldr	r3, [pc, #156]	@ (80056ac <prvHeapInit+0xac>)
 800560e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f003 0307 	and.w	r3, r3, #7
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00c      	beq.n	8005634 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	3307      	adds	r3, #7
 800561e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f023 0307 	bic.w	r3, r3, #7
 8005626:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	4a1f      	ldr	r2, [pc, #124]	@ (80056ac <prvHeapInit+0xac>)
 8005630:	4413      	add	r3, r2
 8005632:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005638:	4a1d      	ldr	r2, [pc, #116]	@ (80056b0 <prvHeapInit+0xb0>)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800563e:	4b1c      	ldr	r3, [pc, #112]	@ (80056b0 <prvHeapInit+0xb0>)
 8005640:	2200      	movs	r2, #0
 8005642:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	4413      	add	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800564c:	2208      	movs	r2, #8
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	1a9b      	subs	r3, r3, r2
 8005652:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 0307 	bic.w	r3, r3, #7
 800565a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4a15      	ldr	r2, [pc, #84]	@ (80056b4 <prvHeapInit+0xb4>)
 8005660:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005662:	4b14      	ldr	r3, [pc, #80]	@ (80056b4 <prvHeapInit+0xb4>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2200      	movs	r2, #0
 8005668:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800566a:	4b12      	ldr	r3, [pc, #72]	@ (80056b4 <prvHeapInit+0xb4>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2200      	movs	r2, #0
 8005670:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	1ad2      	subs	r2, r2, r3
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005680:	4b0c      	ldr	r3, [pc, #48]	@ (80056b4 <prvHeapInit+0xb4>)
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	4a0a      	ldr	r2, [pc, #40]	@ (80056b8 <prvHeapInit+0xb8>)
 800568e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	4a09      	ldr	r2, [pc, #36]	@ (80056bc <prvHeapInit+0xbc>)
 8005696:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005698:	4b09      	ldr	r3, [pc, #36]	@ (80056c0 <prvHeapInit+0xc0>)
 800569a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800569e:	601a      	str	r2, [r3, #0]
}
 80056a0:	bf00      	nop
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	20000f10 	.word	0x20000f10
 80056b0:	20004b10 	.word	0x20004b10
 80056b4:	20004b18 	.word	0x20004b18
 80056b8:	20004b20 	.word	0x20004b20
 80056bc:	20004b1c 	.word	0x20004b1c
 80056c0:	20004b2c 	.word	0x20004b2c

080056c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80056cc:	4b28      	ldr	r3, [pc, #160]	@ (8005770 <prvInsertBlockIntoFreeList+0xac>)
 80056ce:	60fb      	str	r3, [r7, #12]
 80056d0:	e002      	b.n	80056d8 <prvInsertBlockIntoFreeList+0x14>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d8f7      	bhi.n	80056d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	4413      	add	r3, r2
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d108      	bne.n	8005706 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	441a      	add	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	441a      	add	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	429a      	cmp	r2, r3
 8005718:	d118      	bne.n	800574c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	4b15      	ldr	r3, [pc, #84]	@ (8005774 <prvInsertBlockIntoFreeList+0xb0>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	429a      	cmp	r2, r3
 8005724:	d00d      	beq.n	8005742 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685a      	ldr	r2, [r3, #4]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	441a      	add	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	e008      	b.n	8005754 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005742:	4b0c      	ldr	r3, [pc, #48]	@ (8005774 <prvInsertBlockIntoFreeList+0xb0>)
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	601a      	str	r2, [r3, #0]
 800574a:	e003      	b.n	8005754 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	429a      	cmp	r2, r3
 800575a:	d002      	beq.n	8005762 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005762:	bf00      	nop
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	20004b10 	.word	0x20004b10
 8005774:	20004b18 	.word	0x20004b18

08005778 <memset>:
 8005778:	4402      	add	r2, r0
 800577a:	4603      	mov	r3, r0
 800577c:	4293      	cmp	r3, r2
 800577e:	d100      	bne.n	8005782 <memset+0xa>
 8005780:	4770      	bx	lr
 8005782:	f803 1b01 	strb.w	r1, [r3], #1
 8005786:	e7f9      	b.n	800577c <memset+0x4>

08005788 <_reclaim_reent>:
 8005788:	4b29      	ldr	r3, [pc, #164]	@ (8005830 <_reclaim_reent+0xa8>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4283      	cmp	r3, r0
 800578e:	b570      	push	{r4, r5, r6, lr}
 8005790:	4604      	mov	r4, r0
 8005792:	d04b      	beq.n	800582c <_reclaim_reent+0xa4>
 8005794:	69c3      	ldr	r3, [r0, #28]
 8005796:	b1ab      	cbz	r3, 80057c4 <_reclaim_reent+0x3c>
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	b16b      	cbz	r3, 80057b8 <_reclaim_reent+0x30>
 800579c:	2500      	movs	r5, #0
 800579e:	69e3      	ldr	r3, [r4, #28]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	5959      	ldr	r1, [r3, r5]
 80057a4:	2900      	cmp	r1, #0
 80057a6:	d13b      	bne.n	8005820 <_reclaim_reent+0x98>
 80057a8:	3504      	adds	r5, #4
 80057aa:	2d80      	cmp	r5, #128	@ 0x80
 80057ac:	d1f7      	bne.n	800579e <_reclaim_reent+0x16>
 80057ae:	69e3      	ldr	r3, [r4, #28]
 80057b0:	4620      	mov	r0, r4
 80057b2:	68d9      	ldr	r1, [r3, #12]
 80057b4:	f000 f872 	bl	800589c <_free_r>
 80057b8:	69e3      	ldr	r3, [r4, #28]
 80057ba:	6819      	ldr	r1, [r3, #0]
 80057bc:	b111      	cbz	r1, 80057c4 <_reclaim_reent+0x3c>
 80057be:	4620      	mov	r0, r4
 80057c0:	f000 f86c 	bl	800589c <_free_r>
 80057c4:	6961      	ldr	r1, [r4, #20]
 80057c6:	b111      	cbz	r1, 80057ce <_reclaim_reent+0x46>
 80057c8:	4620      	mov	r0, r4
 80057ca:	f000 f867 	bl	800589c <_free_r>
 80057ce:	69e1      	ldr	r1, [r4, #28]
 80057d0:	b111      	cbz	r1, 80057d8 <_reclaim_reent+0x50>
 80057d2:	4620      	mov	r0, r4
 80057d4:	f000 f862 	bl	800589c <_free_r>
 80057d8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80057da:	b111      	cbz	r1, 80057e2 <_reclaim_reent+0x5a>
 80057dc:	4620      	mov	r0, r4
 80057de:	f000 f85d 	bl	800589c <_free_r>
 80057e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057e4:	b111      	cbz	r1, 80057ec <_reclaim_reent+0x64>
 80057e6:	4620      	mov	r0, r4
 80057e8:	f000 f858 	bl	800589c <_free_r>
 80057ec:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80057ee:	b111      	cbz	r1, 80057f6 <_reclaim_reent+0x6e>
 80057f0:	4620      	mov	r0, r4
 80057f2:	f000 f853 	bl	800589c <_free_r>
 80057f6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80057f8:	b111      	cbz	r1, 8005800 <_reclaim_reent+0x78>
 80057fa:	4620      	mov	r0, r4
 80057fc:	f000 f84e 	bl	800589c <_free_r>
 8005800:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005802:	b111      	cbz	r1, 800580a <_reclaim_reent+0x82>
 8005804:	4620      	mov	r0, r4
 8005806:	f000 f849 	bl	800589c <_free_r>
 800580a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800580c:	b111      	cbz	r1, 8005814 <_reclaim_reent+0x8c>
 800580e:	4620      	mov	r0, r4
 8005810:	f000 f844 	bl	800589c <_free_r>
 8005814:	6a23      	ldr	r3, [r4, #32]
 8005816:	b14b      	cbz	r3, 800582c <_reclaim_reent+0xa4>
 8005818:	4620      	mov	r0, r4
 800581a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800581e:	4718      	bx	r3
 8005820:	680e      	ldr	r6, [r1, #0]
 8005822:	4620      	mov	r0, r4
 8005824:	f000 f83a 	bl	800589c <_free_r>
 8005828:	4631      	mov	r1, r6
 800582a:	e7bb      	b.n	80057a4 <_reclaim_reent+0x1c>
 800582c:	bd70      	pop	{r4, r5, r6, pc}
 800582e:	bf00      	nop
 8005830:	20000038 	.word	0x20000038

08005834 <__libc_init_array>:
 8005834:	b570      	push	{r4, r5, r6, lr}
 8005836:	4d0d      	ldr	r5, [pc, #52]	@ (800586c <__libc_init_array+0x38>)
 8005838:	4c0d      	ldr	r4, [pc, #52]	@ (8005870 <__libc_init_array+0x3c>)
 800583a:	1b64      	subs	r4, r4, r5
 800583c:	10a4      	asrs	r4, r4, #2
 800583e:	2600      	movs	r6, #0
 8005840:	42a6      	cmp	r6, r4
 8005842:	d109      	bne.n	8005858 <__libc_init_array+0x24>
 8005844:	4d0b      	ldr	r5, [pc, #44]	@ (8005874 <__libc_init_array+0x40>)
 8005846:	4c0c      	ldr	r4, [pc, #48]	@ (8005878 <__libc_init_array+0x44>)
 8005848:	f000 f87e 	bl	8005948 <_init>
 800584c:	1b64      	subs	r4, r4, r5
 800584e:	10a4      	asrs	r4, r4, #2
 8005850:	2600      	movs	r6, #0
 8005852:	42a6      	cmp	r6, r4
 8005854:	d105      	bne.n	8005862 <__libc_init_array+0x2e>
 8005856:	bd70      	pop	{r4, r5, r6, pc}
 8005858:	f855 3b04 	ldr.w	r3, [r5], #4
 800585c:	4798      	blx	r3
 800585e:	3601      	adds	r6, #1
 8005860:	e7ee      	b.n	8005840 <__libc_init_array+0xc>
 8005862:	f855 3b04 	ldr.w	r3, [r5], #4
 8005866:	4798      	blx	r3
 8005868:	3601      	adds	r6, #1
 800586a:	e7f2      	b.n	8005852 <__libc_init_array+0x1e>
 800586c:	08005a80 	.word	0x08005a80
 8005870:	08005a80 	.word	0x08005a80
 8005874:	08005a80 	.word	0x08005a80
 8005878:	08005a84 	.word	0x08005a84

0800587c <__retarget_lock_acquire_recursive>:
 800587c:	4770      	bx	lr

0800587e <__retarget_lock_release_recursive>:
 800587e:	4770      	bx	lr

08005880 <memcpy>:
 8005880:	440a      	add	r2, r1
 8005882:	4291      	cmp	r1, r2
 8005884:	f100 33ff 	add.w	r3, r0, #4294967295
 8005888:	d100      	bne.n	800588c <memcpy+0xc>
 800588a:	4770      	bx	lr
 800588c:	b510      	push	{r4, lr}
 800588e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005892:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005896:	4291      	cmp	r1, r2
 8005898:	d1f9      	bne.n	800588e <memcpy+0xe>
 800589a:	bd10      	pop	{r4, pc}

0800589c <_free_r>:
 800589c:	b538      	push	{r3, r4, r5, lr}
 800589e:	4605      	mov	r5, r0
 80058a0:	2900      	cmp	r1, #0
 80058a2:	d041      	beq.n	8005928 <_free_r+0x8c>
 80058a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058a8:	1f0c      	subs	r4, r1, #4
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	bfb8      	it	lt
 80058ae:	18e4      	addlt	r4, r4, r3
 80058b0:	f000 f83e 	bl	8005930 <__malloc_lock>
 80058b4:	4a1d      	ldr	r2, [pc, #116]	@ (800592c <_free_r+0x90>)
 80058b6:	6813      	ldr	r3, [r2, #0]
 80058b8:	b933      	cbnz	r3, 80058c8 <_free_r+0x2c>
 80058ba:	6063      	str	r3, [r4, #4]
 80058bc:	6014      	str	r4, [r2, #0]
 80058be:	4628      	mov	r0, r5
 80058c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058c4:	f000 b83a 	b.w	800593c <__malloc_unlock>
 80058c8:	42a3      	cmp	r3, r4
 80058ca:	d908      	bls.n	80058de <_free_r+0x42>
 80058cc:	6820      	ldr	r0, [r4, #0]
 80058ce:	1821      	adds	r1, r4, r0
 80058d0:	428b      	cmp	r3, r1
 80058d2:	bf01      	itttt	eq
 80058d4:	6819      	ldreq	r1, [r3, #0]
 80058d6:	685b      	ldreq	r3, [r3, #4]
 80058d8:	1809      	addeq	r1, r1, r0
 80058da:	6021      	streq	r1, [r4, #0]
 80058dc:	e7ed      	b.n	80058ba <_free_r+0x1e>
 80058de:	461a      	mov	r2, r3
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	b10b      	cbz	r3, 80058e8 <_free_r+0x4c>
 80058e4:	42a3      	cmp	r3, r4
 80058e6:	d9fa      	bls.n	80058de <_free_r+0x42>
 80058e8:	6811      	ldr	r1, [r2, #0]
 80058ea:	1850      	adds	r0, r2, r1
 80058ec:	42a0      	cmp	r0, r4
 80058ee:	d10b      	bne.n	8005908 <_free_r+0x6c>
 80058f0:	6820      	ldr	r0, [r4, #0]
 80058f2:	4401      	add	r1, r0
 80058f4:	1850      	adds	r0, r2, r1
 80058f6:	4283      	cmp	r3, r0
 80058f8:	6011      	str	r1, [r2, #0]
 80058fa:	d1e0      	bne.n	80058be <_free_r+0x22>
 80058fc:	6818      	ldr	r0, [r3, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	6053      	str	r3, [r2, #4]
 8005902:	4408      	add	r0, r1
 8005904:	6010      	str	r0, [r2, #0]
 8005906:	e7da      	b.n	80058be <_free_r+0x22>
 8005908:	d902      	bls.n	8005910 <_free_r+0x74>
 800590a:	230c      	movs	r3, #12
 800590c:	602b      	str	r3, [r5, #0]
 800590e:	e7d6      	b.n	80058be <_free_r+0x22>
 8005910:	6820      	ldr	r0, [r4, #0]
 8005912:	1821      	adds	r1, r4, r0
 8005914:	428b      	cmp	r3, r1
 8005916:	bf04      	itt	eq
 8005918:	6819      	ldreq	r1, [r3, #0]
 800591a:	685b      	ldreq	r3, [r3, #4]
 800591c:	6063      	str	r3, [r4, #4]
 800591e:	bf04      	itt	eq
 8005920:	1809      	addeq	r1, r1, r0
 8005922:	6021      	streq	r1, [r4, #0]
 8005924:	6054      	str	r4, [r2, #4]
 8005926:	e7ca      	b.n	80058be <_free_r+0x22>
 8005928:	bd38      	pop	{r3, r4, r5, pc}
 800592a:	bf00      	nop
 800592c:	20004c6c 	.word	0x20004c6c

08005930 <__malloc_lock>:
 8005930:	4801      	ldr	r0, [pc, #4]	@ (8005938 <__malloc_lock+0x8>)
 8005932:	f7ff bfa3 	b.w	800587c <__retarget_lock_acquire_recursive>
 8005936:	bf00      	nop
 8005938:	20004c68 	.word	0x20004c68

0800593c <__malloc_unlock>:
 800593c:	4801      	ldr	r0, [pc, #4]	@ (8005944 <__malloc_unlock+0x8>)
 800593e:	f7ff bf9e 	b.w	800587e <__retarget_lock_release_recursive>
 8005942:	bf00      	nop
 8005944:	20004c68 	.word	0x20004c68

08005948 <_init>:
 8005948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594a:	bf00      	nop
 800594c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800594e:	bc08      	pop	{r3}
 8005950:	469e      	mov	lr, r3
 8005952:	4770      	bx	lr

08005954 <_fini>:
 8005954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005956:	bf00      	nop
 8005958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800595a:	bc08      	pop	{r3}
 800595c:	469e      	mov	lr, r3
 800595e:	4770      	bx	lr
